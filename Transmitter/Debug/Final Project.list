
Final Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044d0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004694  08004694  00014694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046c4  080046c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080046c4  080046c4  000146c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046cc  080046cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046cc  080046cc  000146cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046d0  080046d0  000146d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080046d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a3c  2000000c  080046e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a48  080046e0  00020a48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001392c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028c3  00000000  00000000  00033968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  00036230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001020  00000000  00000000  00037348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022af1  00000000  00000000  00038368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000140d0  00000000  00000000  0005ae59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3920  00000000  00000000  0006ef29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00142849  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004950  00000000  00000000  0014289c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800467c 	.word	0x0800467c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800467c 	.word	0x0800467c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b590      	push	{r4, r7, lr}
 800050a:	b089      	sub	sp, #36	; 0x24
 800050c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fc81 	bl	8000e14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f871 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f9c9 	bl	80008ac <MX_GPIO_Init>
  MX_DMA_Init();
 800051a:	f000 f9a7 	bl	800086c <MX_DMA_Init>
  MX_USART3_UART_Init();
 800051e:	f000 f94d 	bl	80007bc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000522:	f000 f975 	bl	8000810 <MX_USB_OTG_FS_PCD_Init>
  MX_DAC_Init();
 8000526:	f000 f8d3 	bl	80006d0 <MX_DAC_Init>
  MX_TIM2_Init();
 800052a:	f000 f8fb 	bl	8000724 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  char message[BYTES] = {0b00111011, 'H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '!'};
 800052e:	4b2e      	ldr	r3, [pc, #184]	; (80005e8 <main+0xe0>)
 8000530:	463c      	mov	r4, r7
 8000532:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000534:	c407      	stmia	r4!, {r0, r1, r2}
 8000536:	7023      	strb	r3, [r4, #0]
		  transmission[i+8][j] = get_bit(i, (uint8_t)1)*4000;//triangle[j] + 2048;
	  }
  }*/

  //Load payload
  for(int i = 0; i < BYTES*8; i++){
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]
 800053c:	e035      	b.n	80005aa <main+0xa2>
	  for(int j = 0; j < NS; j++){
 800053e:	2300      	movs	r3, #0
 8000540:	613b      	str	r3, [r7, #16]
 8000542:	e02c      	b.n	800059e <main+0x96>
		  transmission[i][j] = get_bit(i%8, message[i/8])*4000;//*triangle[j] + 2048; //triangle[i%NS]
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	425a      	negs	r2, r3
 8000548:	f003 0307 	and.w	r3, r3, #7
 800054c:	f002 0207 	and.w	r2, r2, #7
 8000550:	bf58      	it	pl
 8000552:	4253      	negpl	r3, r2
 8000554:	b2da      	uxtb	r2, r3
 8000556:	697b      	ldr	r3, [r7, #20]
 8000558:	2b00      	cmp	r3, #0
 800055a:	da00      	bge.n	800055e <main+0x56>
 800055c:	3307      	adds	r3, #7
 800055e:	10db      	asrs	r3, r3, #3
 8000560:	3318      	adds	r3, #24
 8000562:	443b      	add	r3, r7
 8000564:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000568:	4619      	mov	r1, r3
 800056a:	4610      	mov	r0, r2
 800056c:	f000 fa4c 	bl	8000a08 <get_bit>
 8000570:	4603      	mov	r3, r0
 8000572:	b29b      	uxth	r3, r3
 8000574:	461a      	mov	r2, r3
 8000576:	0152      	lsls	r2, r2, #5
 8000578:	1ad2      	subs	r2, r2, r3
 800057a:	0092      	lsls	r2, r2, #2
 800057c:	4413      	add	r3, r2
 800057e:	015b      	lsls	r3, r3, #5
 8000580:	b29b      	uxth	r3, r3
 8000582:	b218      	sxth	r0, r3
 8000584:	4919      	ldr	r1, [pc, #100]	; (80005ec <main+0xe4>)
 8000586:	697a      	ldr	r2, [r7, #20]
 8000588:	4613      	mov	r3, r2
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	4413      	add	r3, r2
 800058e:	693a      	ldr	r2, [r7, #16]
 8000590:	4413      	add	r3, r2
 8000592:	4602      	mov	r2, r0
 8000594:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	  for(int j = 0; j < NS; j++){
 8000598:	693b      	ldr	r3, [r7, #16]
 800059a:	3301      	adds	r3, #1
 800059c:	613b      	str	r3, [r7, #16]
 800059e:	693b      	ldr	r3, [r7, #16]
 80005a0:	2b04      	cmp	r3, #4
 80005a2:	ddcf      	ble.n	8000544 <main+0x3c>
  for(int i = 0; i < BYTES*8; i++){
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	3301      	adds	r3, #1
 80005a8:	617b      	str	r3, [r7, #20]
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	2b67      	cmp	r3, #103	; 0x67
 80005ae:	ddc6      	ble.n	800053e <main+0x36>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)transmission, TRANSMISSIONLENGTH, DAC_ALIGN_12B_R);
 80005b0:	2300      	movs	r3, #0
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80005b8:	4a0c      	ldr	r2, [pc, #48]	; (80005ec <main+0xe4>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	480c      	ldr	r0, [pc, #48]	; (80005f0 <main+0xe8>)
 80005be:	f000 fdf3 	bl	80011a8 <HAL_DAC_Start_DMA>
	  HAL_TIM_Base_Start(&htim2);
 80005c2:	480c      	ldr	r0, [pc, #48]	; (80005f4 <main+0xec>)
 80005c4:	f002 ff8a 	bl	80034dc <HAL_TIM_Base_Start>
	  while(HAL_DAC_GetState(&hdac) != HAL_DAC_STATE_READY)HAL_Delay(1);
 80005c8:	e002      	b.n	80005d0 <main+0xc8>
 80005ca:	2001      	movs	r0, #1
 80005cc:	f000 fc94 	bl	8000ef8 <HAL_Delay>
 80005d0:	4807      	ldr	r0, [pc, #28]	; (80005f0 <main+0xe8>)
 80005d2:	f000 ff24 	bl	800141e <HAL_DAC_GetState>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d1f6      	bne.n	80005ca <main+0xc2>
	  HAL_Delay(3000);
 80005dc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005e0:	f000 fc8a 	bl	8000ef8 <HAL_Delay>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)transmission, TRANSMISSIONLENGTH, DAC_ALIGN_12B_R);
 80005e4:	e7e4      	b.n	80005b0 <main+0xa8>
 80005e6:	bf00      	nop
 80005e8:	08004694 	.word	0x08004694
 80005ec:	20000634 	.word	0x20000634
 80005f0:	20000028 	.word	0x20000028
 80005f4:	2000009c 	.word	0x2000009c

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	; 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 031c 	add.w	r3, r7, #28
 8000602:	2234      	movs	r2, #52	; 0x34
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f004 f830 	bl	800466c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 0308 	add.w	r3, r7, #8
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	4b29      	ldr	r3, [pc, #164]	; (80006c8 <SystemClock_Config+0xd0>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	4a28      	ldr	r2, [pc, #160]	; (80006c8 <SystemClock_Config+0xd0>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	; 0x40
 800062c:	4b26      	ldr	r3, [pc, #152]	; (80006c8 <SystemClock_Config+0xd0>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000638:	2300      	movs	r3, #0
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	4b23      	ldr	r3, [pc, #140]	; (80006cc <SystemClock_Config+0xd4>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a22      	ldr	r2, [pc, #136]	; (80006cc <SystemClock_Config+0xd4>)
 8000642:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b20      	ldr	r3, [pc, #128]	; (80006cc <SystemClock_Config+0xd4>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000654:	2301      	movs	r3, #1
 8000656:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000658:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800065c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000662:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000666:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000668:	2304      	movs	r3, #4
 800066a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800066c:	23a8      	movs	r3, #168	; 0xa8
 800066e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000674:	2307      	movs	r3, #7
 8000676:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000678:	2302      	movs	r3, #2
 800067a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4618      	mov	r0, r3
 8000682:	f002 fc3d 	bl	8002f00 <HAL_RCC_OscConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800068c:	f000 f9d5 	bl	8000a3a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000690:	230f      	movs	r3, #15
 8000692:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000694:	2302      	movs	r3, #2
 8000696:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800069c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a8:	f107 0308 	add.w	r3, r7, #8
 80006ac:	2105      	movs	r1, #5
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 fdb2 	bl	8002218 <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006ba:	f000 f9be 	bl	8000a3a <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3750      	adds	r7, #80	; 0x50
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006d6:	463b      	mov	r3, r7
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_DAC_Init+0x4c>)
 80006e0:	4a0f      	ldr	r2, [pc, #60]	; (8000720 <MX_DAC_Init+0x50>)
 80006e2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80006e4:	480d      	ldr	r0, [pc, #52]	; (800071c <MX_DAC_Init+0x4c>)
 80006e6:	f000 fd3c 	bl	8001162 <HAL_DAC_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80006f0:	f000 f9a3 	bl	8000a3a <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80006f4:	2324      	movs	r3, #36	; 0x24
 80006f6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006fc:	463b      	mov	r3, r7
 80006fe:	2200      	movs	r2, #0
 8000700:	4619      	mov	r1, r3
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <MX_DAC_Init+0x4c>)
 8000704:	f000 fe3c 	bl	8001380 <HAL_DAC_ConfigChannel>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800070e:	f000 f994 	bl	8000a3a <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000028 	.word	0x20000028
 8000720:	40007400 	.word	0x40007400

08000724 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072a:	f107 0308 	add.w	r3, r7, #8
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000738:	463b      	mov	r3, r7
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000740:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <MX_TIM2_Init+0x94>)
 8000742:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000746:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5;
 8000748:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <MX_TIM2_Init+0x94>)
 800074a:	2205      	movs	r2, #5
 800074c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074e:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <MX_TIM2_Init+0x94>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2799;
 8000754:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <MX_TIM2_Init+0x94>)
 8000756:	f640 22ef 	movw	r2, #2799	; 0xaef
 800075a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075c:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <MX_TIM2_Init+0x94>)
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <MX_TIM2_Init+0x94>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000768:	4813      	ldr	r0, [pc, #76]	; (80007b8 <MX_TIM2_Init+0x94>)
 800076a:	f002 fe67 	bl	800343c <HAL_TIM_Base_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000774:	f000 f961 	bl	8000a3a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800077e:	f107 0308 	add.w	r3, r7, #8
 8000782:	4619      	mov	r1, r3
 8000784:	480c      	ldr	r0, [pc, #48]	; (80007b8 <MX_TIM2_Init+0x94>)
 8000786:	f002 ff11 	bl	80035ac <HAL_TIM_ConfigClockSource>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000790:	f000 f953 	bl	8000a3a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000794:	2320      	movs	r3, #32
 8000796:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000798:	2300      	movs	r3, #0
 800079a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800079c:	463b      	mov	r3, r7
 800079e:	4619      	mov	r1, r3
 80007a0:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_TIM2_Init+0x94>)
 80007a2:	f003 f905 	bl	80039b0 <HAL_TIMEx_MasterConfigSynchronization>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80007ac:	f000 f945 	bl	8000a3a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	3718      	adds	r7, #24
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	2000009c 	.word	0x2000009c

080007bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_USART3_UART_Init+0x4c>)
 80007c2:	4a12      	ldr	r2, [pc, #72]	; (800080c <MX_USART3_UART_Init+0x50>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_USART3_UART_Init+0x4c>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_USART3_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_USART3_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_USART3_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_USART3_UART_Init+0x4c>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_USART3_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_USART3_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_USART3_UART_Init+0x4c>)
 80007f4:	f003 f958 	bl	8003aa8 <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007fe:	f000 f91c 	bl	8000a3a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200000e4 	.word	0x200000e4
 800080c:	40004800 	.word	0x40004800

08000810 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000816:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800081a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081e:	2206      	movs	r2, #6
 8000820:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000824:	2202      	movs	r2, #2
 8000826:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000830:	2202      	movs	r2, #2
 8000832:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000836:	2201      	movs	r2, #1
 8000838:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000848:	2201      	movs	r2, #1
 800084a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000854:	f001 fb97 	bl	8001f86 <HAL_PCD_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800085e:	f000 f8ec 	bl	8000a3a <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000128 	.word	0x20000128

0800086c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_DMA_Init+0x3c>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a0b      	ldr	r2, [pc, #44]	; (80008a8 <MX_DMA_Init+0x3c>)
 800087c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_DMA_Init+0x3c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2100      	movs	r1, #0
 8000892:	2010      	movs	r0, #16
 8000894:	f000 fc2f 	bl	80010f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000898:	2010      	movs	r0, #16
 800089a:	f000 fc48 	bl	800112e <HAL_NVIC_EnableIRQ>

}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800

080008ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08c      	sub	sp, #48	; 0x30
 80008b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	61bb      	str	r3, [r7, #24]
 80008c6:	4b4c      	ldr	r3, [pc, #304]	; (80009f8 <MX_GPIO_Init+0x14c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a4b      	ldr	r2, [pc, #300]	; (80009f8 <MX_GPIO_Init+0x14c>)
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b49      	ldr	r3, [pc, #292]	; (80009f8 <MX_GPIO_Init+0x14c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	61bb      	str	r3, [r7, #24]
 80008dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
 80008e2:	4b45      	ldr	r3, [pc, #276]	; (80009f8 <MX_GPIO_Init+0x14c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a44      	ldr	r2, [pc, #272]	; (80009f8 <MX_GPIO_Init+0x14c>)
 80008e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b42      	ldr	r3, [pc, #264]	; (80009f8 <MX_GPIO_Init+0x14c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	4b3e      	ldr	r3, [pc, #248]	; (80009f8 <MX_GPIO_Init+0x14c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a3d      	ldr	r2, [pc, #244]	; (80009f8 <MX_GPIO_Init+0x14c>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b3b      	ldr	r3, [pc, #236]	; (80009f8 <MX_GPIO_Init+0x14c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	4b37      	ldr	r3, [pc, #220]	; (80009f8 <MX_GPIO_Init+0x14c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a36      	ldr	r2, [pc, #216]	; (80009f8 <MX_GPIO_Init+0x14c>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b34      	ldr	r3, [pc, #208]	; (80009f8 <MX_GPIO_Init+0x14c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	4b30      	ldr	r3, [pc, #192]	; (80009f8 <MX_GPIO_Init+0x14c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a2f      	ldr	r2, [pc, #188]	; (80009f8 <MX_GPIO_Init+0x14c>)
 800093c:	f043 0308 	orr.w	r3, r3, #8
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b2d      	ldr	r3, [pc, #180]	; (80009f8 <MX_GPIO_Init+0x14c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0308 	and.w	r3, r3, #8
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b29      	ldr	r3, [pc, #164]	; (80009f8 <MX_GPIO_Init+0x14c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a28      	ldr	r2, [pc, #160]	; (80009f8 <MX_GPIO_Init+0x14c>)
 8000958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b26      	ldr	r3, [pc, #152]	; (80009f8 <MX_GPIO_Init+0x14c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000970:	4822      	ldr	r0, [pc, #136]	; (80009fc <MX_GPIO_Init+0x150>)
 8000972:	f001 faef 	bl	8001f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	2140      	movs	r1, #64	; 0x40
 800097a:	4821      	ldr	r0, [pc, #132]	; (8000a00 <MX_GPIO_Init+0x154>)
 800097c:	f001 faea 	bl	8001f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000980:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000986:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	481b      	ldr	r0, [pc, #108]	; (8000a04 <MX_GPIO_Init+0x158>)
 8000998:	f001 f948 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800099c:	f244 0381 	movw	r3, #16513	; 0x4081
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	4811      	ldr	r0, [pc, #68]	; (80009fc <MX_GPIO_Init+0x150>)
 80009b6:	f001 f939 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009ba:	2340      	movs	r3, #64	; 0x40
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	480b      	ldr	r0, [pc, #44]	; (8000a00 <MX_GPIO_Init+0x154>)
 80009d2:	f001 f92b 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009d6:	2380      	movs	r3, #128	; 0x80
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_GPIO_Init+0x154>)
 80009ea:	f001 f91f 	bl	8001c2c <HAL_GPIO_Init>

}
 80009ee:	bf00      	nop
 80009f0:	3730      	adds	r7, #48	; 0x30
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40020400 	.word	0x40020400
 8000a00:	40021800 	.word	0x40021800
 8000a04:	40020800 	.word	0x40020800

08000a08 <get_bit>:

/* USER CODE BEGIN 4 */
int8_t get_bit(uint8_t index, char letter){
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	460a      	mov	r2, r1
 8000a12:	71fb      	strb	r3, [r7, #7]
 8000a14:	4613      	mov	r3, r2
 8000a16:	71bb      	strb	r3, [r7, #6]
	if((1 << index) & letter){
 8000a18:	79ba      	ldrb	r2, [r7, #6]
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	fa42 f303 	asr.w	r3, r2, r3
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <get_bit+0x24>
		return 1;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	e000      	b.n	8000a2e <get_bit+0x26>
	}

	return 0;
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3e:	b672      	cpsid	i
}
 8000a40:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <Error_Handler+0x8>

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	4a0f      	ldr	r2, [pc, #60]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a58:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a74:	6413      	str	r3, [r2, #64]	; 0x40
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800

08000a94 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	; 0x28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a2f      	ldr	r2, [pc, #188]	; (8000b70 <HAL_DAC_MspInit+0xdc>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d158      	bne.n	8000b68 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	4b2e      	ldr	r3, [pc, #184]	; (8000b74 <HAL_DAC_MspInit+0xe0>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	4a2d      	ldr	r2, [pc, #180]	; (8000b74 <HAL_DAC_MspInit+0xe0>)
 8000ac0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac6:	4b2b      	ldr	r3, [pc, #172]	; (8000b74 <HAL_DAC_MspInit+0xe0>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	4b27      	ldr	r3, [pc, #156]	; (8000b74 <HAL_DAC_MspInit+0xe0>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a26      	ldr	r2, [pc, #152]	; (8000b74 <HAL_DAC_MspInit+0xe0>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b24      	ldr	r3, [pc, #144]	; (8000b74 <HAL_DAC_MspInit+0xe0>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000aee:	2310      	movs	r3, #16
 8000af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000af2:	2303      	movs	r3, #3
 8000af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	481d      	ldr	r0, [pc, #116]	; (8000b78 <HAL_DAC_MspInit+0xe4>)
 8000b02:	f001 f893 	bl	8001c2c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8000b06:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <HAL_DAC_MspInit+0xe8>)
 8000b08:	4a1d      	ldr	r2, [pc, #116]	; (8000b80 <HAL_DAC_MspInit+0xec>)
 8000b0a:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8000b0c:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <HAL_DAC_MspInit+0xe8>)
 8000b0e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000b12:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b14:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <HAL_DAC_MspInit+0xe8>)
 8000b16:	2240      	movs	r2, #64	; 0x40
 8000b18:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b1a:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <HAL_DAC_MspInit+0xe8>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8000b20:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <HAL_DAC_MspInit+0xe8>)
 8000b22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b26:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b28:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <HAL_DAC_MspInit+0xe8>)
 8000b2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b2e:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_DAC_MspInit+0xe8>)
 8000b32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b36:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 8000b38:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <HAL_DAC_MspInit+0xe8>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <HAL_DAC_MspInit+0xe8>)
 8000b40:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b44:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b46:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <HAL_DAC_MspInit+0xe8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8000b4c:	480b      	ldr	r0, [pc, #44]	; (8000b7c <HAL_DAC_MspInit+0xe8>)
 8000b4e:	f000 fcfd 	bl	800154c <HAL_DMA_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8000b58:	f7ff ff6f 	bl	8000a3a <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <HAL_DAC_MspInit+0xe8>)
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	4a06      	ldr	r2, [pc, #24]	; (8000b7c <HAL_DAC_MspInit+0xe8>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	; 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40007400 	.word	0x40007400
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020000 	.word	0x40020000
 8000b7c:	2000003c 	.word	0x2000003c
 8000b80:	40026088 	.word	0x40026088

08000b84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b94:	d10d      	bne.n	8000bb2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <HAL_TIM_Base_MspInit+0x3c>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <HAL_TIM_Base_MspInit+0x3c>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_TIM_Base_MspInit+0x3c>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bb2:	bf00      	nop
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	40023800 	.word	0x40023800

08000bc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	; 0x28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a19      	ldr	r2, [pc, #100]	; (8000c48 <HAL_UART_MspInit+0x84>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d12c      	bne.n	8000c40 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <HAL_UART_MspInit+0x88>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	4a17      	ldr	r2, [pc, #92]	; (8000c4c <HAL_UART_MspInit+0x88>)
 8000bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf6:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <HAL_UART_MspInit+0x88>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <HAL_UART_MspInit+0x88>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a10      	ldr	r2, [pc, #64]	; (8000c4c <HAL_UART_MspInit+0x88>)
 8000c0c:	f043 0308 	orr.w	r3, r3, #8
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <HAL_UART_MspInit+0x88>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0308 	and.w	r3, r3, #8
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	2302      	movs	r3, #2
 8000c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c30:	2307      	movs	r3, #7
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4805      	ldr	r0, [pc, #20]	; (8000c50 <HAL_UART_MspInit+0x8c>)
 8000c3c:	f000 fff6 	bl	8001c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c40:	bf00      	nop
 8000c42:	3728      	adds	r7, #40	; 0x28
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40004800 	.word	0x40004800
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020c00 	.word	0x40020c00

08000c54 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b0a0      	sub	sp, #128	; 0x80
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c6c:	f107 0310 	add.w	r3, r7, #16
 8000c70:	225c      	movs	r2, #92	; 0x5c
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f003 fcf9 	bl	800466c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c82:	d14e      	bne.n	8000d22 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000c84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c88:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c8e:	f107 0310 	add.w	r3, r7, #16
 8000c92:	4618      	mov	r0, r3
 8000c94:	f001 fbda 	bl	800244c <HAL_RCCEx_PeriphCLKConfig>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000c9e:	f7ff fecc 	bl	8000a3a <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	4b21      	ldr	r3, [pc, #132]	; (8000d2c <HAL_PCD_MspInit+0xd8>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a20      	ldr	r2, [pc, #128]	; (8000d2c <HAL_PCD_MspInit+0xd8>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <HAL_PCD_MspInit+0xd8>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000cbe:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000cc2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cd0:	230a      	movs	r3, #10
 8000cd2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4815      	ldr	r0, [pc, #84]	; (8000d30 <HAL_PCD_MspInit+0xdc>)
 8000cdc:	f000 ffa6 	bl	8001c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ce0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ce4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	480e      	ldr	r0, [pc, #56]	; (8000d30 <HAL_PCD_MspInit+0xdc>)
 8000cf6:	f000 ff99 	bl	8001c2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <HAL_PCD_MspInit+0xd8>)
 8000cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cfe:	4a0b      	ldr	r2, [pc, #44]	; (8000d2c <HAL_PCD_MspInit+0xd8>)
 8000d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d04:	6353      	str	r3, [r2, #52]	; 0x34
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <HAL_PCD_MspInit+0xd8>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	4a07      	ldr	r2, [pc, #28]	; (8000d2c <HAL_PCD_MspInit+0xd8>)
 8000d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d14:	6453      	str	r3, [r2, #68]	; 0x44
 8000d16:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <HAL_PCD_MspInit+0xd8>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d22:	bf00      	nop
 8000d24:	3780      	adds	r7, #128	; 0x80
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020000 	.word	0x40020000

08000d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <NMI_Handler+0x4>

08000d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <HardFault_Handler+0x4>

08000d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <MemManage_Handler+0x4>

08000d46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <BusFault_Handler+0x4>

08000d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <UsageFault_Handler+0x4>

08000d52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d80:	f000 f89a 	bl	8000eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <DMA1_Stream5_IRQHandler+0x10>)
 8000d8e:	f000 fce3 	bl	8001758 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	2000003c 	.word	0x2000003c

08000d9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <SystemInit+0x20>)
 8000da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <SystemInit+0x20>)
 8000da8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc4:	480d      	ldr	r0, [pc, #52]	; (8000dfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dc6:	490e      	ldr	r1, [pc, #56]	; (8000e00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dc8:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dcc:	e002      	b.n	8000dd4 <LoopCopyDataInit>

08000dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd2:	3304      	adds	r3, #4

08000dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd8:	d3f9      	bcc.n	8000dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dda:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ddc:	4c0b      	ldr	r4, [pc, #44]	; (8000e0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de0:	e001      	b.n	8000de6 <LoopFillZerobss>

08000de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de4:	3204      	adds	r2, #4

08000de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de8:	d3fb      	bcc.n	8000de2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dea:	f7ff ffd7 	bl	8000d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dee:	f003 fc19 	bl	8004624 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000df2:	f7ff fb89 	bl	8000508 <main>
  bx  lr    
 8000df6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000df8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e00:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e04:	080046d4 	.word	0x080046d4
  ldr r2, =_sbss
 8000e08:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e0c:	20000a48 	.word	0x20000a48

08000e10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e10:	e7fe      	b.n	8000e10 <ADC_IRQHandler>
	...

08000e14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e18:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	; (8000e54 <HAL_Init+0x40>)
 8000e1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e24:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <HAL_Init+0x40>)
 8000e2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <HAL_Init+0x40>)
 8000e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e3c:	2003      	movs	r0, #3
 8000e3e:	f000 f94f 	bl	80010e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e42:	2000      	movs	r0, #0
 8000e44:	f000 f808 	bl	8000e58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e48:	f7ff fdfc 	bl	8000a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40023c00 	.word	0x40023c00

08000e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <HAL_InitTick+0x54>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <HAL_InitTick+0x58>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 f967 	bl	800114a <HAL_SYSTICK_Config>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e00e      	b.n	8000ea4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b0f      	cmp	r3, #15
 8000e8a:	d80a      	bhi.n	8000ea2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	f04f 30ff 	mov.w	r0, #4294967295
 8000e94:	f000 f92f 	bl	80010f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e98:	4a06      	ldr	r2, [pc, #24]	; (8000eb4 <HAL_InitTick+0x5c>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e000      	b.n	8000ea4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	20000008 	.word	0x20000008
 8000eb4:	20000004 	.word	0x20000004

08000eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x20>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_IncTick+0x24>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4a04      	ldr	r2, [pc, #16]	; (8000edc <HAL_IncTick+0x24>)
 8000eca:	6013      	str	r3, [r2, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	20000a44 	.word	0x20000a44

08000ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <HAL_GetTick+0x14>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000a44 	.word	0x20000a44

08000ef8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f00:	f7ff ffee 	bl	8000ee0 <HAL_GetTick>
 8000f04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f10:	d005      	beq.n	8000f1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f12:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <HAL_Delay+0x44>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	461a      	mov	r2, r3
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f1e:	bf00      	nop
 8000f20:	f7ff ffde 	bl	8000ee0 <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d8f7      	bhi.n	8000f20 <HAL_Delay+0x28>
  {
  }
}
 8000f30:	bf00      	nop
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000008 	.word	0x20000008

08000f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <__NVIC_SetPriorityGrouping+0x44>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f72:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <__NVIC_SetPriorityGrouping+0x44>)
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	60d3      	str	r3, [r2, #12]
}
 8000f78:	bf00      	nop
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	0a1b      	lsrs	r3, r3, #8
 8000f92:	f003 0307 	and.w	r3, r3, #7
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	db0b      	blt.n	8000fce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	f003 021f 	and.w	r2, r3, #31
 8000fbc:	4907      	ldr	r1, [pc, #28]	; (8000fdc <__NVIC_EnableIRQ+0x38>)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	095b      	lsrs	r3, r3, #5
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000e100 	.word	0xe000e100

08000fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	db0a      	blt.n	800100a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	490c      	ldr	r1, [pc, #48]	; (800102c <__NVIC_SetPriority+0x4c>)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	0112      	lsls	r2, r2, #4
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	440b      	add	r3, r1
 8001004:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001008:	e00a      	b.n	8001020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4908      	ldr	r1, [pc, #32]	; (8001030 <__NVIC_SetPriority+0x50>)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	f003 030f 	and.w	r3, r3, #15
 8001016:	3b04      	subs	r3, #4
 8001018:	0112      	lsls	r2, r2, #4
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	440b      	add	r3, r1
 800101e:	761a      	strb	r2, [r3, #24]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000e100 	.word	0xe000e100
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001034:	b480      	push	{r7}
 8001036:	b089      	sub	sp, #36	; 0x24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f1c3 0307 	rsb	r3, r3, #7
 800104e:	2b04      	cmp	r3, #4
 8001050:	bf28      	it	cs
 8001052:	2304      	movcs	r3, #4
 8001054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3304      	adds	r3, #4
 800105a:	2b06      	cmp	r3, #6
 800105c:	d902      	bls.n	8001064 <NVIC_EncodePriority+0x30>
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3b03      	subs	r3, #3
 8001062:	e000      	b.n	8001066 <NVIC_EncodePriority+0x32>
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	f04f 32ff 	mov.w	r2, #4294967295
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43da      	mvns	r2, r3
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	401a      	ands	r2, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800107c:	f04f 31ff 	mov.w	r1, #4294967295
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	fa01 f303 	lsl.w	r3, r1, r3
 8001086:	43d9      	mvns	r1, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	4313      	orrs	r3, r2
         );
}
 800108e:	4618      	mov	r0, r3
 8001090:	3724      	adds	r7, #36	; 0x24
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
	...

0800109c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010ac:	d301      	bcc.n	80010b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00f      	b.n	80010d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b2:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <SysTick_Config+0x40>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ba:	210f      	movs	r1, #15
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	f7ff ff8e 	bl	8000fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <SysTick_Config+0x40>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ca:	4b04      	ldr	r3, [pc, #16]	; (80010dc <SysTick_Config+0x40>)
 80010cc:	2207      	movs	r2, #7
 80010ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	e000e010 	.word	0xe000e010

080010e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff29 	bl	8000f40 <__NVIC_SetPriorityGrouping>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b086      	sub	sp, #24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001108:	f7ff ff3e 	bl	8000f88 <__NVIC_GetPriorityGrouping>
 800110c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	68b9      	ldr	r1, [r7, #8]
 8001112:	6978      	ldr	r0, [r7, #20]
 8001114:	f7ff ff8e 	bl	8001034 <NVIC_EncodePriority>
 8001118:	4602      	mov	r2, r0
 800111a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111e:	4611      	mov	r1, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff5d 	bl	8000fe0 <__NVIC_SetPriority>
}
 8001126:	bf00      	nop
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff31 	bl	8000fa4 <__NVIC_EnableIRQ>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ffa2 	bl	800109c <SysTick_Config>
 8001158:	4603      	mov	r3, r0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d101      	bne.n	8001174 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e014      	b.n	800119e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	791b      	ldrb	r3, [r3, #4]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d105      	bne.n	800118a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff fc85 	bl	8000a94 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2202      	movs	r2, #2
 800118e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2201      	movs	r2, #1
 800119a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
 80011b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	795b      	ldrb	r3, [r3, #5]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d101      	bne.n	80011ca <HAL_DAC_Start_DMA+0x22>
 80011c6:	2302      	movs	r3, #2
 80011c8:	e0ab      	b.n	8001322 <HAL_DAC_Start_DMA+0x17a>
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2201      	movs	r2, #1
 80011ce:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2202      	movs	r2, #2
 80011d4:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d12f      	bne.n	800123c <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	4a52      	ldr	r2, [pc, #328]	; (800132c <HAL_DAC_Start_DMA+0x184>)
 80011e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	4a51      	ldr	r2, [pc, #324]	; (8001330 <HAL_DAC_Start_DMA+0x188>)
 80011ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	4a50      	ldr	r2, [pc, #320]	; (8001334 <HAL_DAC_Start_DMA+0x18c>)
 80011f2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001202:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001204:	6a3b      	ldr	r3, [r7, #32]
 8001206:	2b08      	cmp	r3, #8
 8001208:	d013      	beq.n	8001232 <HAL_DAC_Start_DMA+0x8a>
 800120a:	6a3b      	ldr	r3, [r7, #32]
 800120c:	2b08      	cmp	r3, #8
 800120e:	d845      	bhi.n	800129c <HAL_DAC_Start_DMA+0xf4>
 8001210:	6a3b      	ldr	r3, [r7, #32]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_DAC_Start_DMA+0x76>
 8001216:	6a3b      	ldr	r3, [r7, #32]
 8001218:	2b04      	cmp	r3, #4
 800121a:	d005      	beq.n	8001228 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800121c:	e03e      	b.n	800129c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	3308      	adds	r3, #8
 8001224:	613b      	str	r3, [r7, #16]
        break;
 8001226:	e03c      	b.n	80012a2 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	330c      	adds	r3, #12
 800122e:	613b      	str	r3, [r7, #16]
        break;
 8001230:	e037      	b.n	80012a2 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	3310      	adds	r3, #16
 8001238:	613b      	str	r3, [r7, #16]
        break;
 800123a:	e032      	b.n	80012a2 <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	4a3d      	ldr	r2, [pc, #244]	; (8001338 <HAL_DAC_Start_DMA+0x190>)
 8001242:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	4a3c      	ldr	r2, [pc, #240]	; (800133c <HAL_DAC_Start_DMA+0x194>)
 800124a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	4a3b      	ldr	r2, [pc, #236]	; (8001340 <HAL_DAC_Start_DMA+0x198>)
 8001252:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001262:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001264:	6a3b      	ldr	r3, [r7, #32]
 8001266:	2b08      	cmp	r3, #8
 8001268:	d013      	beq.n	8001292 <HAL_DAC_Start_DMA+0xea>
 800126a:	6a3b      	ldr	r3, [r7, #32]
 800126c:	2b08      	cmp	r3, #8
 800126e:	d817      	bhi.n	80012a0 <HAL_DAC_Start_DMA+0xf8>
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_DAC_Start_DMA+0xd6>
 8001276:	6a3b      	ldr	r3, [r7, #32]
 8001278:	2b04      	cmp	r3, #4
 800127a:	d005      	beq.n	8001288 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800127c:	e010      	b.n	80012a0 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	3314      	adds	r3, #20
 8001284:	613b      	str	r3, [r7, #16]
        break;
 8001286:	e00c      	b.n	80012a2 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	3318      	adds	r3, #24
 800128e:	613b      	str	r3, [r7, #16]
        break;
 8001290:	e007      	b.n	80012a2 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	331c      	adds	r3, #28
 8001298:	613b      	str	r3, [r7, #16]
        break;
 800129a:	e002      	b.n	80012a2 <HAL_DAC_Start_DMA+0xfa>
        break;
 800129c:	bf00      	nop
 800129e:	e000      	b.n	80012a2 <HAL_DAC_Start_DMA+0xfa>
        break;
 80012a0:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d111      	bne.n	80012cc <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012b6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	6898      	ldr	r0, [r3, #8]
 80012bc:	6879      	ldr	r1, [r7, #4]
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	f000 f9f1 	bl	80016a8 <HAL_DMA_Start_IT>
 80012c6:	4603      	mov	r3, r0
 80012c8:	75fb      	strb	r3, [r7, #23]
 80012ca:	e010      	b.n	80012ee <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80012da:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	68d8      	ldr	r0, [r3, #12]
 80012e0:	6879      	ldr	r1, [r7, #4]
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	f000 f9df 	bl	80016a8 <HAL_DMA_Start_IT>
 80012ea:	4603      	mov	r3, r0
 80012ec:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2200      	movs	r2, #0
 80012f2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80012f4:	7dfb      	ldrb	r3, [r7, #23]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d10c      	bne.n	8001314 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	6819      	ldr	r1, [r3, #0]
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	f003 0310 	and.w	r3, r3, #16
 8001306:	2201      	movs	r2, #1
 8001308:	409a      	lsls	r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	430a      	orrs	r2, r1
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	e005      	b.n	8001320 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	f043 0204 	orr.w	r2, r3, #4
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001320:	7dfb      	ldrb	r3, [r7, #23]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	08001439 	.word	0x08001439
 8001330:	0800145b 	.word	0x0800145b
 8001334:	08001477 	.word	0x08001477
 8001338:	080014e1 	.word	0x080014e1
 800133c:	08001503 	.word	0x08001503
 8001340:	0800151f 	.word	0x0800151f

08001344 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001380:	b480      	push	{r7}
 8001382:	b087      	sub	sp, #28
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	795b      	ldrb	r3, [r3, #5]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d101      	bne.n	8001398 <HAL_DAC_ConfigChannel+0x18>
 8001394:	2302      	movs	r3, #2
 8001396:	e03c      	b.n	8001412 <HAL_DAC_ConfigChannel+0x92>
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2201      	movs	r2, #1
 800139c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2202      	movs	r2, #2
 80013a2:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f003 0310 	and.w	r3, r3, #16
 80013b2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43db      	mvns	r3, r3
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	4013      	ands	r3, r2
 80013c0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f003 0310 	and.w	r3, r3, #16
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	697a      	ldr	r2, [r7, #20]
 80013dc:	4313      	orrs	r3, r2
 80013de:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6819      	ldr	r1, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f003 0310 	and.w	r3, r3, #16
 80013f4:	22c0      	movs	r2, #192	; 0xc0
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43da      	mvns	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	400a      	ands	r2, r1
 8001402:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2201      	movs	r2, #1
 8001408:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2200      	movs	r2, #0
 800140e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	371c      	adds	r7, #28
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <HAL_DAC_GetState>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL state
  */
HAL_DAC_StateTypeDef HAL_DAC_GetState(DAC_HandleTypeDef *hdac)
{
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
  /* Return DAC handle state */
  return hdac->State;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	791b      	ldrb	r3, [r3, #4]
 800142a:	b2db      	uxtb	r3, r3
}
 800142c:	4618      	mov	r0, r3
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001444:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f7ff ff7c 	bl	8001344 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2201      	movs	r2, #1
 8001450:	711a      	strb	r2, [r3, #4]
}
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b084      	sub	sp, #16
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001466:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001468:	68f8      	ldr	r0, [r7, #12]
 800146a:	f7ff ff75 	bl	8001358 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b084      	sub	sp, #16
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001482:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	f043 0204 	orr.w	r2, r3, #4
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f7ff ff6b 	bl	800136c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2201      	movs	r2, #1
 800149a:	711a      	strb	r2, [r3, #4]
}
 800149c:	bf00      	nop
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ec:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f7ff ffd8 	bl	80014a4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2201      	movs	r2, #1
 80014f8:	711a      	strb	r2, [r3, #4]
}
 80014fa:	bf00      	nop
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b084      	sub	sp, #16
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800150e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001510:	68f8      	ldr	r0, [r7, #12]
 8001512:	f7ff ffd1 	bl	80014b8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b084      	sub	sp, #16
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800152a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	f043 0204 	orr.w	r2, r3, #4
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f7ff ffc7 	bl	80014cc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2201      	movs	r2, #1
 8001542:	711a      	strb	r2, [r3, #4]
}
 8001544:	bf00      	nop
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001558:	f7ff fcc2 	bl	8000ee0 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e099      	b.n	800169c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2202      	movs	r2, #2
 800156c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 0201 	bic.w	r2, r2, #1
 8001586:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001588:	e00f      	b.n	80015aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800158a:	f7ff fca9 	bl	8000ee0 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b05      	cmp	r3, #5
 8001596:	d908      	bls.n	80015aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2220      	movs	r2, #32
 800159c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2203      	movs	r2, #3
 80015a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e078      	b.n	800169c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1e8      	bne.n	800158a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	4b38      	ldr	r3, [pc, #224]	; (80016a4 <HAL_DMA_Init+0x158>)
 80015c4:	4013      	ands	r3, r2
 80015c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001600:	2b04      	cmp	r3, #4
 8001602:	d107      	bne.n	8001614 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160c:	4313      	orrs	r3, r2
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	4313      	orrs	r3, r2
 8001612:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	f023 0307 	bic.w	r3, r3, #7
 800162a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	4313      	orrs	r3, r2
 8001634:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163a:	2b04      	cmp	r3, #4
 800163c:	d117      	bne.n	800166e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	4313      	orrs	r3, r2
 8001646:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164c:	2b00      	cmp	r3, #0
 800164e:	d00e      	beq.n	800166e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f000 fa6f 	bl	8001b34 <DMA_CheckFifoParam>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d008      	beq.n	800166e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2240      	movs	r2, #64	; 0x40
 8001660:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2201      	movs	r2, #1
 8001666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800166a:	2301      	movs	r3, #1
 800166c:	e016      	b.n	800169c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 fa26 	bl	8001ac8 <DMA_CalcBaseAndBitshift>
 800167c:	4603      	mov	r3, r0
 800167e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001684:	223f      	movs	r2, #63	; 0x3f
 8001686:	409a      	lsls	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	f010803f 	.word	0xf010803f

080016a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
 80016b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d101      	bne.n	80016ce <HAL_DMA_Start_IT+0x26>
 80016ca:	2302      	movs	r3, #2
 80016cc:	e040      	b.n	8001750 <HAL_DMA_Start_IT+0xa8>
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2201      	movs	r2, #1
 80016d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d12f      	bne.n	8001742 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2202      	movs	r2, #2
 80016e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2200      	movs	r2, #0
 80016ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	68b9      	ldr	r1, [r7, #8]
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f000 f9b8 	bl	8001a6c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001700:	223f      	movs	r2, #63	; 0x3f
 8001702:	409a      	lsls	r2, r3
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0216 	orr.w	r2, r2, #22
 8001716:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171c:	2b00      	cmp	r3, #0
 800171e:	d007      	beq.n	8001730 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0208 	orr.w	r2, r2, #8
 800172e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 0201 	orr.w	r2, r2, #1
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	e005      	b.n	800174e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800174a:	2302      	movs	r3, #2
 800174c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800174e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001760:	2300      	movs	r3, #0
 8001762:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001764:	4b8e      	ldr	r3, [pc, #568]	; (80019a0 <HAL_DMA_IRQHandler+0x248>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a8e      	ldr	r2, [pc, #568]	; (80019a4 <HAL_DMA_IRQHandler+0x24c>)
 800176a:	fba2 2303 	umull	r2, r3, r2, r3
 800176e:	0a9b      	lsrs	r3, r3, #10
 8001770:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001776:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001782:	2208      	movs	r2, #8
 8001784:	409a      	lsls	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	4013      	ands	r3, r2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d01a      	beq.n	80017c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	2b00      	cmp	r3, #0
 800179a:	d013      	beq.n	80017c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 0204 	bic.w	r2, r2, #4
 80017aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b0:	2208      	movs	r2, #8
 80017b2:	409a      	lsls	r2, r3
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017bc:	f043 0201 	orr.w	r2, r3, #1
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c8:	2201      	movs	r2, #1
 80017ca:	409a      	lsls	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4013      	ands	r3, r2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d012      	beq.n	80017fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d00b      	beq.n	80017fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e6:	2201      	movs	r2, #1
 80017e8:	409a      	lsls	r2, r3
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f2:	f043 0202 	orr.w	r2, r3, #2
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017fe:	2204      	movs	r2, #4
 8001800:	409a      	lsls	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4013      	ands	r3, r2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d012      	beq.n	8001830 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d00b      	beq.n	8001830 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800181c:	2204      	movs	r2, #4
 800181e:	409a      	lsls	r2, r3
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001828:	f043 0204 	orr.w	r2, r3, #4
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001834:	2210      	movs	r2, #16
 8001836:	409a      	lsls	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4013      	ands	r3, r2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d043      	beq.n	80018c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0308 	and.w	r3, r3, #8
 800184a:	2b00      	cmp	r3, #0
 800184c:	d03c      	beq.n	80018c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001852:	2210      	movs	r2, #16
 8001854:	409a      	lsls	r2, r3
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d018      	beq.n	800189a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d108      	bne.n	8001888 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	2b00      	cmp	r3, #0
 800187c:	d024      	beq.n	80018c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	4798      	blx	r3
 8001886:	e01f      	b.n	80018c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800188c:	2b00      	cmp	r3, #0
 800188e:	d01b      	beq.n	80018c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	4798      	blx	r3
 8001898:	e016      	b.n	80018c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d107      	bne.n	80018b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 0208 	bic.w	r2, r2, #8
 80018b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018cc:	2220      	movs	r2, #32
 80018ce:	409a      	lsls	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4013      	ands	r3, r2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 808f 	beq.w	80019f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0310 	and.w	r3, r3, #16
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 8087 	beq.w	80019f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ee:	2220      	movs	r2, #32
 80018f0:	409a      	lsls	r2, r3
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b05      	cmp	r3, #5
 8001900:	d136      	bne.n	8001970 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 0216 	bic.w	r2, r2, #22
 8001910:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	695a      	ldr	r2, [r3, #20]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001920:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	2b00      	cmp	r3, #0
 8001928:	d103      	bne.n	8001932 <HAL_DMA_IRQHandler+0x1da>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800192e:	2b00      	cmp	r3, #0
 8001930:	d007      	beq.n	8001942 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 0208 	bic.w	r2, r2, #8
 8001940:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001946:	223f      	movs	r2, #63	; 0x3f
 8001948:	409a      	lsls	r2, r3
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2201      	movs	r2, #1
 8001952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001962:	2b00      	cmp	r3, #0
 8001964:	d07e      	beq.n	8001a64 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	4798      	blx	r3
        }
        return;
 800196e:	e079      	b.n	8001a64 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d01d      	beq.n	80019ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d10d      	bne.n	80019a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001990:	2b00      	cmp	r3, #0
 8001992:	d031      	beq.n	80019f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	4798      	blx	r3
 800199c:	e02c      	b.n	80019f8 <HAL_DMA_IRQHandler+0x2a0>
 800199e:	bf00      	nop
 80019a0:	20000000 	.word	0x20000000
 80019a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d023      	beq.n	80019f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	4798      	blx	r3
 80019b8:	e01e      	b.n	80019f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d10f      	bne.n	80019e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0210 	bic.w	r2, r2, #16
 80019d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d032      	beq.n	8001a66 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d022      	beq.n	8001a52 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2205      	movs	r2, #5
 8001a10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 0201 	bic.w	r2, r2, #1
 8001a22:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	3301      	adds	r3, #1
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d307      	bcc.n	8001a40 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f2      	bne.n	8001a24 <HAL_DMA_IRQHandler+0x2cc>
 8001a3e:	e000      	b.n	8001a42 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a40:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d005      	beq.n	8001a66 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	4798      	blx	r3
 8001a62:	e000      	b.n	8001a66 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a64:	bf00      	nop
    }
  }
}
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
 8001a78:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a88:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	2b40      	cmp	r3, #64	; 0x40
 8001a98:	d108      	bne.n	8001aac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001aaa:	e007      	b.n	8001abc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	60da      	str	r2, [r3, #12]
}
 8001abc:	bf00      	nop
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	3b10      	subs	r3, #16
 8001ad8:	4a14      	ldr	r2, [pc, #80]	; (8001b2c <DMA_CalcBaseAndBitshift+0x64>)
 8001ada:	fba2 2303 	umull	r2, r3, r2, r3
 8001ade:	091b      	lsrs	r3, r3, #4
 8001ae0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ae2:	4a13      	ldr	r2, [pc, #76]	; (8001b30 <DMA_CalcBaseAndBitshift+0x68>)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	461a      	mov	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d909      	bls.n	8001b0a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001afe:	f023 0303 	bic.w	r3, r3, #3
 8001b02:	1d1a      	adds	r2, r3, #4
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	659a      	str	r2, [r3, #88]	; 0x58
 8001b08:	e007      	b.n	8001b1a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b12:	f023 0303 	bic.w	r3, r3, #3
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	aaaaaaab 	.word	0xaaaaaaab
 8001b30:	080046bc 	.word	0x080046bc

08001b34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d11f      	bne.n	8001b8e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	2b03      	cmp	r3, #3
 8001b52:	d856      	bhi.n	8001c02 <DMA_CheckFifoParam+0xce>
 8001b54:	a201      	add	r2, pc, #4	; (adr r2, 8001b5c <DMA_CheckFifoParam+0x28>)
 8001b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b5a:	bf00      	nop
 8001b5c:	08001b6d 	.word	0x08001b6d
 8001b60:	08001b7f 	.word	0x08001b7f
 8001b64:	08001b6d 	.word	0x08001b6d
 8001b68:	08001c03 	.word	0x08001c03
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d046      	beq.n	8001c06 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b7c:	e043      	b.n	8001c06 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b86:	d140      	bne.n	8001c0a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b8c:	e03d      	b.n	8001c0a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b96:	d121      	bne.n	8001bdc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d837      	bhi.n	8001c0e <DMA_CheckFifoParam+0xda>
 8001b9e:	a201      	add	r2, pc, #4	; (adr r2, 8001ba4 <DMA_CheckFifoParam+0x70>)
 8001ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba4:	08001bb5 	.word	0x08001bb5
 8001ba8:	08001bbb 	.word	0x08001bbb
 8001bac:	08001bb5 	.word	0x08001bb5
 8001bb0:	08001bcd 	.word	0x08001bcd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8001bb8:	e030      	b.n	8001c1c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d025      	beq.n	8001c12 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bca:	e022      	b.n	8001c12 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bd4:	d11f      	bne.n	8001c16 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001bda:	e01c      	b.n	8001c16 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d903      	bls.n	8001bea <DMA_CheckFifoParam+0xb6>
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	2b03      	cmp	r3, #3
 8001be6:	d003      	beq.n	8001bf0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001be8:	e018      	b.n	8001c1c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	73fb      	strb	r3, [r7, #15]
      break;
 8001bee:	e015      	b.n	8001c1c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d00e      	beq.n	8001c1a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8001c00:	e00b      	b.n	8001c1a <DMA_CheckFifoParam+0xe6>
      break;
 8001c02:	bf00      	nop
 8001c04:	e00a      	b.n	8001c1c <DMA_CheckFifoParam+0xe8>
      break;
 8001c06:	bf00      	nop
 8001c08:	e008      	b.n	8001c1c <DMA_CheckFifoParam+0xe8>
      break;
 8001c0a:	bf00      	nop
 8001c0c:	e006      	b.n	8001c1c <DMA_CheckFifoParam+0xe8>
      break;
 8001c0e:	bf00      	nop
 8001c10:	e004      	b.n	8001c1c <DMA_CheckFifoParam+0xe8>
      break;
 8001c12:	bf00      	nop
 8001c14:	e002      	b.n	8001c1c <DMA_CheckFifoParam+0xe8>
      break;   
 8001c16:	bf00      	nop
 8001c18:	e000      	b.n	8001c1c <DMA_CheckFifoParam+0xe8>
      break;
 8001c1a:	bf00      	nop
    }
  } 
  
  return status; 
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop

08001c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b089      	sub	sp, #36	; 0x24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
 8001c46:	e165      	b.n	8001f14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c48:	2201      	movs	r2, #1
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	f040 8154 	bne.w	8001f0e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d005      	beq.n	8001c7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d130      	bne.n	8001ce0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	2203      	movs	r2, #3
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4013      	ands	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	68da      	ldr	r2, [r3, #12]
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	091b      	lsrs	r3, r3, #4
 8001cca:	f003 0201 	and.w	r2, r3, #1
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	d017      	beq.n	8001d1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d123      	bne.n	8001d70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	08da      	lsrs	r2, r3, #3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3208      	adds	r2, #8
 8001d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	220f      	movs	r2, #15
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	691a      	ldr	r2, [r3, #16]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	08da      	lsrs	r2, r3, #3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3208      	adds	r2, #8
 8001d6a:	69b9      	ldr	r1, [r7, #24]
 8001d6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 0203 	and.w	r2, r3, #3
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f000 80ae 	beq.w	8001f0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	4b5d      	ldr	r3, [pc, #372]	; (8001f2c <HAL_GPIO_Init+0x300>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dba:	4a5c      	ldr	r2, [pc, #368]	; (8001f2c <HAL_GPIO_Init+0x300>)
 8001dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc2:	4b5a      	ldr	r3, [pc, #360]	; (8001f2c <HAL_GPIO_Init+0x300>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dce:	4a58      	ldr	r2, [pc, #352]	; (8001f30 <HAL_GPIO_Init+0x304>)
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	089b      	lsrs	r3, r3, #2
 8001dd4:	3302      	adds	r3, #2
 8001dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	220f      	movs	r2, #15
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4013      	ands	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a4f      	ldr	r2, [pc, #316]	; (8001f34 <HAL_GPIO_Init+0x308>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d025      	beq.n	8001e46 <HAL_GPIO_Init+0x21a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4e      	ldr	r2, [pc, #312]	; (8001f38 <HAL_GPIO_Init+0x30c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d01f      	beq.n	8001e42 <HAL_GPIO_Init+0x216>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4d      	ldr	r2, [pc, #308]	; (8001f3c <HAL_GPIO_Init+0x310>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d019      	beq.n	8001e3e <HAL_GPIO_Init+0x212>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a4c      	ldr	r2, [pc, #304]	; (8001f40 <HAL_GPIO_Init+0x314>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d013      	beq.n	8001e3a <HAL_GPIO_Init+0x20e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a4b      	ldr	r2, [pc, #300]	; (8001f44 <HAL_GPIO_Init+0x318>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d00d      	beq.n	8001e36 <HAL_GPIO_Init+0x20a>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a4a      	ldr	r2, [pc, #296]	; (8001f48 <HAL_GPIO_Init+0x31c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d007      	beq.n	8001e32 <HAL_GPIO_Init+0x206>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a49      	ldr	r2, [pc, #292]	; (8001f4c <HAL_GPIO_Init+0x320>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d101      	bne.n	8001e2e <HAL_GPIO_Init+0x202>
 8001e2a:	2306      	movs	r3, #6
 8001e2c:	e00c      	b.n	8001e48 <HAL_GPIO_Init+0x21c>
 8001e2e:	2307      	movs	r3, #7
 8001e30:	e00a      	b.n	8001e48 <HAL_GPIO_Init+0x21c>
 8001e32:	2305      	movs	r3, #5
 8001e34:	e008      	b.n	8001e48 <HAL_GPIO_Init+0x21c>
 8001e36:	2304      	movs	r3, #4
 8001e38:	e006      	b.n	8001e48 <HAL_GPIO_Init+0x21c>
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e004      	b.n	8001e48 <HAL_GPIO_Init+0x21c>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e002      	b.n	8001e48 <HAL_GPIO_Init+0x21c>
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <HAL_GPIO_Init+0x21c>
 8001e46:	2300      	movs	r3, #0
 8001e48:	69fa      	ldr	r2, [r7, #28]
 8001e4a:	f002 0203 	and.w	r2, r2, #3
 8001e4e:	0092      	lsls	r2, r2, #2
 8001e50:	4093      	lsls	r3, r2
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e58:	4935      	ldr	r1, [pc, #212]	; (8001f30 <HAL_GPIO_Init+0x304>)
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	089b      	lsrs	r3, r3, #2
 8001e5e:	3302      	adds	r3, #2
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e66:	4b3a      	ldr	r3, [pc, #232]	; (8001f50 <HAL_GPIO_Init+0x324>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4013      	ands	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e8a:	4a31      	ldr	r2, [pc, #196]	; (8001f50 <HAL_GPIO_Init+0x324>)
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e90:	4b2f      	ldr	r3, [pc, #188]	; (8001f50 <HAL_GPIO_Init+0x324>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001eb4:	4a26      	ldr	r2, [pc, #152]	; (8001f50 <HAL_GPIO_Init+0x324>)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eba:	4b25      	ldr	r3, [pc, #148]	; (8001f50 <HAL_GPIO_Init+0x324>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ede:	4a1c      	ldr	r2, [pc, #112]	; (8001f50 <HAL_GPIO_Init+0x324>)
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ee4:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <HAL_GPIO_Init+0x324>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f08:	4a11      	ldr	r2, [pc, #68]	; (8001f50 <HAL_GPIO_Init+0x324>)
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3301      	adds	r3, #1
 8001f12:	61fb      	str	r3, [r7, #28]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	2b0f      	cmp	r3, #15
 8001f18:	f67f ae96 	bls.w	8001c48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	bf00      	nop
 8001f20:	3724      	adds	r7, #36	; 0x24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40013800 	.word	0x40013800
 8001f34:	40020000 	.word	0x40020000
 8001f38:	40020400 	.word	0x40020400
 8001f3c:	40020800 	.word	0x40020800
 8001f40:	40020c00 	.word	0x40020c00
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40021400 	.word	0x40021400
 8001f4c:	40021800 	.word	0x40021800
 8001f50:	40013c00 	.word	0x40013c00

08001f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	807b      	strh	r3, [r7, #2]
 8001f60:	4613      	mov	r3, r2
 8001f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f64:	787b      	ldrb	r3, [r7, #1]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f6a:	887a      	ldrh	r2, [r7, #2]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f70:	e003      	b.n	8001f7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f72:	887b      	ldrh	r3, [r7, #2]
 8001f74:	041a      	lsls	r2, r3, #16
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	619a      	str	r2, [r3, #24]
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f88:	b08f      	sub	sp, #60	; 0x3c
 8001f8a:	af0a      	add	r7, sp, #40	; 0x28
 8001f8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e116      	b.n	80021c6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d106      	bne.n	8001fb8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7fe fe4e 	bl	8000c54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2203      	movs	r2, #3
 8001fbc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d102      	bne.n	8001fd2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f002 f889 	bl	80040ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	603b      	str	r3, [r7, #0]
 8001fe2:	687e      	ldr	r6, [r7, #4]
 8001fe4:	466d      	mov	r5, sp
 8001fe6:	f106 0410 	add.w	r4, r6, #16
 8001fea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ff0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ff2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ff6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ffa:	1d33      	adds	r3, r6, #4
 8001ffc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ffe:	6838      	ldr	r0, [r7, #0]
 8002000:	f002 f814 	bl	800402c <USB_CoreInit>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d005      	beq.n	8002016 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2202      	movs	r2, #2
 800200e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e0d7      	b.n	80021c6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2100      	movs	r1, #0
 800201c:	4618      	mov	r0, r3
 800201e:	f002 f877 	bl	8004110 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002022:	2300      	movs	r3, #0
 8002024:	73fb      	strb	r3, [r7, #15]
 8002026:	e04a      	b.n	80020be <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002028:	7bfa      	ldrb	r2, [r7, #15]
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	4413      	add	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	333d      	adds	r3, #61	; 0x3d
 8002038:	2201      	movs	r2, #1
 800203a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800203c:	7bfa      	ldrb	r2, [r7, #15]
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	4413      	add	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	333c      	adds	r3, #60	; 0x3c
 800204c:	7bfa      	ldrb	r2, [r7, #15]
 800204e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002050:	7bfa      	ldrb	r2, [r7, #15]
 8002052:	7bfb      	ldrb	r3, [r7, #15]
 8002054:	b298      	uxth	r0, r3
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	4613      	mov	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	4413      	add	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	440b      	add	r3, r1
 8002062:	3344      	adds	r3, #68	; 0x44
 8002064:	4602      	mov	r2, r0
 8002066:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002068:	7bfa      	ldrb	r2, [r7, #15]
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4413      	add	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	3340      	adds	r3, #64	; 0x40
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800207c:	7bfa      	ldrb	r2, [r7, #15]
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4413      	add	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	3348      	adds	r3, #72	; 0x48
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002090:	7bfa      	ldrb	r2, [r7, #15]
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	4413      	add	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	440b      	add	r3, r1
 800209e:	334c      	adds	r3, #76	; 0x4c
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020a4:	7bfa      	ldrb	r2, [r7, #15]
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4413      	add	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	3354      	adds	r3, #84	; 0x54
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
 80020ba:	3301      	adds	r3, #1
 80020bc:	73fb      	strb	r3, [r7, #15]
 80020be:	7bfa      	ldrb	r2, [r7, #15]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d3af      	bcc.n	8002028 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020c8:	2300      	movs	r3, #0
 80020ca:	73fb      	strb	r3, [r7, #15]
 80020cc:	e044      	b.n	8002158 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020ce:	7bfa      	ldrb	r2, [r7, #15]
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4413      	add	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	440b      	add	r3, r1
 80020dc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020e4:	7bfa      	ldrb	r2, [r7, #15]
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	4613      	mov	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4413      	add	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80020f6:	7bfa      	ldrb	r2, [r7, #15]
 80020f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020fa:	7bfa      	ldrb	r2, [r7, #15]
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	4613      	mov	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	4413      	add	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	440b      	add	r3, r1
 8002108:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800210c:	2200      	movs	r2, #0
 800210e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002110:	7bfa      	ldrb	r2, [r7, #15]
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	4613      	mov	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4413      	add	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002126:	7bfa      	ldrb	r2, [r7, #15]
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	4413      	add	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	440b      	add	r3, r1
 8002134:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800213c:	7bfa      	ldrb	r2, [r7, #15]
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4413      	add	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002152:	7bfb      	ldrb	r3, [r7, #15]
 8002154:	3301      	adds	r3, #1
 8002156:	73fb      	strb	r3, [r7, #15]
 8002158:	7bfa      	ldrb	r2, [r7, #15]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	429a      	cmp	r2, r3
 8002160:	d3b5      	bcc.n	80020ce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	603b      	str	r3, [r7, #0]
 8002168:	687e      	ldr	r6, [r7, #4]
 800216a:	466d      	mov	r5, sp
 800216c:	f106 0410 	add.w	r4, r6, #16
 8002170:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002172:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002174:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002176:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002178:	e894 0003 	ldmia.w	r4, {r0, r1}
 800217c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002180:	1d33      	adds	r3, r6, #4
 8002182:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002184:	6838      	ldr	r0, [r7, #0]
 8002186:	f002 f80f 	bl	80041a8 <USB_DevInit>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d005      	beq.n	800219c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2202      	movs	r2, #2
 8002194:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e014      	b.n	80021c6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d102      	bne.n	80021ba <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f80a 	bl	80021ce <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f002 f9cd 	bl	800455e <USB_DevDisconnect>

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021ce <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b085      	sub	sp, #20
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002200:	f043 0303 	orr.w	r3, r3, #3
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0cc      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800222c:	4b68      	ldr	r3, [pc, #416]	; (80023d0 <HAL_RCC_ClockConfig+0x1b8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 030f 	and.w	r3, r3, #15
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d90c      	bls.n	8002254 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223a:	4b65      	ldr	r3, [pc, #404]	; (80023d0 <HAL_RCC_ClockConfig+0x1b8>)
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002242:	4b63      	ldr	r3, [pc, #396]	; (80023d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	d001      	beq.n	8002254 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e0b8      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d020      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800226c:	4b59      	ldr	r3, [pc, #356]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	4a58      	ldr	r2, [pc, #352]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002276:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0308 	and.w	r3, r3, #8
 8002280:	2b00      	cmp	r3, #0
 8002282:	d005      	beq.n	8002290 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002284:	4b53      	ldr	r3, [pc, #332]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	4a52      	ldr	r2, [pc, #328]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800228a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800228e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002290:	4b50      	ldr	r3, [pc, #320]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	494d      	ldr	r1, [pc, #308]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d044      	beq.n	8002338 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d107      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b6:	4b47      	ldr	r3, [pc, #284]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d119      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e07f      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d003      	beq.n	80022d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	d107      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d6:	4b3f      	ldr	r3, [pc, #252]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d109      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e06f      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e6:	4b3b      	ldr	r3, [pc, #236]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e067      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022f6:	4b37      	ldr	r3, [pc, #220]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f023 0203 	bic.w	r2, r3, #3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	4934      	ldr	r1, [pc, #208]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002304:	4313      	orrs	r3, r2
 8002306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002308:	f7fe fdea 	bl	8000ee0 <HAL_GetTick>
 800230c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230e:	e00a      	b.n	8002326 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002310:	f7fe fde6 	bl	8000ee0 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	f241 3288 	movw	r2, #5000	; 0x1388
 800231e:	4293      	cmp	r3, r2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e04f      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002326:	4b2b      	ldr	r3, [pc, #172]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 020c 	and.w	r2, r3, #12
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	429a      	cmp	r2, r3
 8002336:	d1eb      	bne.n	8002310 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002338:	4b25      	ldr	r3, [pc, #148]	; (80023d0 <HAL_RCC_ClockConfig+0x1b8>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 030f 	and.w	r3, r3, #15
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	d20c      	bcs.n	8002360 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002346:	4b22      	ldr	r3, [pc, #136]	; (80023d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800234e:	4b20      	ldr	r3, [pc, #128]	; (80023d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	d001      	beq.n	8002360 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e032      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d008      	beq.n	800237e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800236c:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	4916      	ldr	r1, [pc, #88]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	4313      	orrs	r3, r2
 800237c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	d009      	beq.n	800239e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800238a:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	490e      	ldr	r1, [pc, #56]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800239a:	4313      	orrs	r3, r2
 800239c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800239e:	f000 fb7f 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 80023a2:	4602      	mov	r2, r0
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	091b      	lsrs	r3, r3, #4
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	490a      	ldr	r1, [pc, #40]	; (80023d8 <HAL_RCC_ClockConfig+0x1c0>)
 80023b0:	5ccb      	ldrb	r3, [r1, r3]
 80023b2:	fa22 f303 	lsr.w	r3, r2, r3
 80023b6:	4a09      	ldr	r2, [pc, #36]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 80023b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023ba:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <HAL_RCC_ClockConfig+0x1c8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe fd4a 	bl	8000e58 <HAL_InitTick>

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40023c00 	.word	0x40023c00
 80023d4:	40023800 	.word	0x40023800
 80023d8:	080046a4 	.word	0x080046a4
 80023dc:	20000000 	.word	0x20000000
 80023e0:	20000004 	.word	0x20000004

080023e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023e8:	4b03      	ldr	r3, [pc, #12]	; (80023f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80023ea:	681b      	ldr	r3, [r3, #0]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	20000000 	.word	0x20000000

080023fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002400:	f7ff fff0 	bl	80023e4 <HAL_RCC_GetHCLKFreq>
 8002404:	4602      	mov	r2, r0
 8002406:	4b05      	ldr	r3, [pc, #20]	; (800241c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	0a9b      	lsrs	r3, r3, #10
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	4903      	ldr	r1, [pc, #12]	; (8002420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002412:	5ccb      	ldrb	r3, [r1, r3]
 8002414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002418:	4618      	mov	r0, r3
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40023800 	.word	0x40023800
 8002420:	080046b4 	.word	0x080046b4

08002424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002428:	f7ff ffdc 	bl	80023e4 <HAL_RCC_GetHCLKFreq>
 800242c:	4602      	mov	r2, r0
 800242e:	4b05      	ldr	r3, [pc, #20]	; (8002444 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	0b5b      	lsrs	r3, r3, #13
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	4903      	ldr	r1, [pc, #12]	; (8002448 <HAL_RCC_GetPCLK2Freq+0x24>)
 800243a:	5ccb      	ldrb	r3, [r1, r3]
 800243c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002440:	4618      	mov	r0, r3
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40023800 	.word	0x40023800
 8002448:	080046b4 	.word	0x080046b4

0800244c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08c      	sub	sp, #48	; 0x30
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800245c:	2300      	movs	r3, #0
 800245e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002460:	2300      	movs	r3, #0
 8002462:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800246c:	2300      	movs	r3, #0
 800246e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002470:	2300      	movs	r3, #0
 8002472:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	d010      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002484:	4b6f      	ldr	r3, [pc, #444]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002486:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800248a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002492:	496c      	ldr	r1, [pc, #432]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002494:	4313      	orrs	r3, r2
 8002496:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80024a2:	2301      	movs	r3, #1
 80024a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d010      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80024b2:	4b64      	ldr	r3, [pc, #400]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024b8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c0:	4960      	ldr	r1, [pc, #384]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80024d0:	2301      	movs	r3, #1
 80024d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d017      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024e0:	4b58      	ldr	r3, [pc, #352]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	4955      	ldr	r1, [pc, #340]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024fe:	d101      	bne.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002500:	2301      	movs	r3, #1
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800250c:	2301      	movs	r3, #1
 800250e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0308 	and.w	r3, r3, #8
 8002518:	2b00      	cmp	r3, #0
 800251a:	d017      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800251c:	4b49      	ldr	r3, [pc, #292]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800251e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002522:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800252a:	4946      	ldr	r1, [pc, #280]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800252c:	4313      	orrs	r3, r2
 800252e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002536:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800253a:	d101      	bne.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800253c:	2301      	movs	r3, #1
 800253e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002548:	2301      	movs	r3, #1
 800254a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0320 	and.w	r3, r3, #32
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 808a 	beq.w	800266e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	4b39      	ldr	r3, [pc, #228]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	4a38      	ldr	r2, [pc, #224]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002568:	6413      	str	r3, [r2, #64]	; 0x40
 800256a:	4b36      	ldr	r3, [pc, #216]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002576:	4b34      	ldr	r3, [pc, #208]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a33      	ldr	r2, [pc, #204]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800257c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002580:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002582:	f7fe fcad 	bl	8000ee0 <HAL_GetTick>
 8002586:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002588:	e008      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800258a:	f7fe fca9 	bl	8000ee0 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e278      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800259c:	4b2a      	ldr	r3, [pc, #168]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f0      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025a8:	4b26      	ldr	r3, [pc, #152]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025b0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d02f      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c0:	6a3a      	ldr	r2, [r7, #32]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d028      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025c6:	4b1f      	ldr	r3, [pc, #124]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025ce:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025d0:	4b1e      	ldr	r3, [pc, #120]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80025d2:	2201      	movs	r2, #1
 80025d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025d6:	4b1d      	ldr	r3, [pc, #116]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80025dc:	4a19      	ldr	r2, [pc, #100]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025de:	6a3b      	ldr	r3, [r7, #32]
 80025e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80025e2:	4b18      	ldr	r3, [pc, #96]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d114      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80025ee:	f7fe fc77 	bl	8000ee0 <HAL_GetTick>
 80025f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f4:	e00a      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025f6:	f7fe fc73 	bl	8000ee0 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	f241 3288 	movw	r2, #5000	; 0x1388
 8002604:	4293      	cmp	r3, r2
 8002606:	d901      	bls.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e240      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800260c:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800260e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0ee      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002620:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002624:	d114      	bne.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002626:	4b07      	ldr	r3, [pc, #28]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002636:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800263a:	4902      	ldr	r1, [pc, #8]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800263c:	4313      	orrs	r3, r2
 800263e:	608b      	str	r3, [r1, #8]
 8002640:	e00c      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002642:	bf00      	nop
 8002644:	40023800 	.word	0x40023800
 8002648:	40007000 	.word	0x40007000
 800264c:	42470e40 	.word	0x42470e40
 8002650:	4b4a      	ldr	r3, [pc, #296]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	4a49      	ldr	r2, [pc, #292]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002656:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800265a:	6093      	str	r3, [r2, #8]
 800265c:	4b47      	ldr	r3, [pc, #284]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800265e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002668:	4944      	ldr	r1, [pc, #272]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800266a:	4313      	orrs	r3, r2
 800266c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	2b00      	cmp	r3, #0
 8002678:	d004      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002680:	4b3f      	ldr	r3, [pc, #252]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002682:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00a      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002690:	4b3a      	ldr	r3, [pc, #232]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002692:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002696:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269e:	4937      	ldr	r1, [pc, #220]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00a      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80026b2:	4b32      	ldr	r3, [pc, #200]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026b8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c0:	492e      	ldr	r1, [pc, #184]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d011      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80026d4:	4b29      	ldr	r3, [pc, #164]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026da:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e2:	4926      	ldr	r1, [pc, #152]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026f2:	d101      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80026f4:	2301      	movs	r3, #1
 80026f6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00a      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002704:	4b1d      	ldr	r3, [pc, #116]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800270a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	491a      	ldr	r1, [pc, #104]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002722:	2b00      	cmp	r3, #0
 8002724:	d011      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002726:	4b15      	ldr	r3, [pc, #84]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002728:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800272c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002734:	4911      	ldr	r1, [pc, #68]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002736:	4313      	orrs	r3, r2
 8002738:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002740:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002744:	d101      	bne.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002746:	2301      	movs	r3, #1
 8002748:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800274a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274c:	2b01      	cmp	r3, #1
 800274e:	d005      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002758:	f040 80ff 	bne.w	800295a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800275c:	4b09      	ldr	r3, [pc, #36]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002762:	f7fe fbbd 	bl	8000ee0 <HAL_GetTick>
 8002766:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002768:	e00e      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800276a:	f7fe fbb9 	bl	8000ee0 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d907      	bls.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e188      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800277c:	40023800 	.word	0x40023800
 8002780:	424711e0 	.word	0x424711e0
 8002784:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002788:	4b7e      	ldr	r3, [pc, #504]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1ea      	bne.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d009      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d028      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d124      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80027bc:	4b71      	ldr	r3, [pc, #452]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027c2:	0c1b      	lsrs	r3, r3, #16
 80027c4:	f003 0303 	and.w	r3, r3, #3
 80027c8:	3301      	adds	r3, #1
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80027ce:	4b6d      	ldr	r3, [pc, #436]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027d4:	0e1b      	lsrs	r3, r3, #24
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	019b      	lsls	r3, r3, #6
 80027e6:	431a      	orrs	r2, r3
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	085b      	lsrs	r3, r3, #1
 80027ec:	3b01      	subs	r3, #1
 80027ee:	041b      	lsls	r3, r3, #16
 80027f0:	431a      	orrs	r2, r3
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	061b      	lsls	r3, r3, #24
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	071b      	lsls	r3, r3, #28
 80027fe:	4961      	ldr	r1, [pc, #388]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002800:	4313      	orrs	r3, r2
 8002802:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0304 	and.w	r3, r3, #4
 800280e:	2b00      	cmp	r3, #0
 8002810:	d004      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800281a:	d00a      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002824:	2b00      	cmp	r3, #0
 8002826:	d035      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002830:	d130      	bne.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002832:	4b54      	ldr	r3, [pc, #336]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002834:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002838:	0c1b      	lsrs	r3, r3, #16
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	3301      	adds	r3, #1
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002844:	4b4f      	ldr	r3, [pc, #316]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002846:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800284a:	0f1b      	lsrs	r3, r3, #28
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	019b      	lsls	r3, r3, #6
 800285c:	431a      	orrs	r2, r3
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	085b      	lsrs	r3, r3, #1
 8002862:	3b01      	subs	r3, #1
 8002864:	041b      	lsls	r3, r3, #16
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	061b      	lsls	r3, r3, #24
 800286e:	431a      	orrs	r2, r3
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	071b      	lsls	r3, r3, #28
 8002874:	4943      	ldr	r1, [pc, #268]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800287c:	4b41      	ldr	r3, [pc, #260]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800287e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002882:	f023 021f 	bic.w	r2, r3, #31
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288a:	3b01      	subs	r3, #1
 800288c:	493d      	ldr	r1, [pc, #244]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800289c:	2b00      	cmp	r3, #0
 800289e:	d029      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028a8:	d124      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80028aa:	4b36      	ldr	r3, [pc, #216]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028b0:	0c1b      	lsrs	r3, r3, #16
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	3301      	adds	r3, #1
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80028bc:	4b31      	ldr	r3, [pc, #196]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028c2:	0f1b      	lsrs	r3, r3, #28
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	019b      	lsls	r3, r3, #6
 80028d4:	431a      	orrs	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	085b      	lsrs	r3, r3, #1
 80028dc:	3b01      	subs	r3, #1
 80028de:	041b      	lsls	r3, r3, #16
 80028e0:	431a      	orrs	r2, r3
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	061b      	lsls	r3, r3, #24
 80028e6:	431a      	orrs	r2, r3
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	071b      	lsls	r3, r3, #28
 80028ec:	4925      	ldr	r1, [pc, #148]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d016      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	019b      	lsls	r3, r3, #6
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	085b      	lsrs	r3, r3, #1
 8002912:	3b01      	subs	r3, #1
 8002914:	041b      	lsls	r3, r3, #16
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	061b      	lsls	r3, r3, #24
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	071b      	lsls	r3, r3, #28
 8002926:	4917      	ldr	r1, [pc, #92]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002928:	4313      	orrs	r3, r2
 800292a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800292e:	4b16      	ldr	r3, [pc, #88]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002930:	2201      	movs	r2, #1
 8002932:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002934:	f7fe fad4 	bl	8000ee0 <HAL_GetTick>
 8002938:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800293a:	e008      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800293c:	f7fe fad0 	bl	8000ee0 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e09f      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800294e:	4b0d      	ldr	r3, [pc, #52]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0f0      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800295a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295c:	2b01      	cmp	r3, #1
 800295e:	f040 8095 	bne.w	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002962:	4b0a      	ldr	r3, [pc, #40]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002968:	f7fe faba 	bl	8000ee0 <HAL_GetTick>
 800296c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800296e:	e00f      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002970:	f7fe fab6 	bl	8000ee0 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d908      	bls.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e085      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002982:	bf00      	nop
 8002984:	40023800 	.word	0x40023800
 8002988:	42470068 	.word	0x42470068
 800298c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002990:	4b41      	ldr	r3, [pc, #260]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002998:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800299c:	d0e8      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d009      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d02b      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d127      	bne.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80029c6:	4b34      	ldr	r3, [pc, #208]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029cc:	0c1b      	lsrs	r3, r3, #16
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	3301      	adds	r3, #1
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	699a      	ldr	r2, [r3, #24]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	019b      	lsls	r3, r3, #6
 80029e2:	431a      	orrs	r2, r3
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	085b      	lsrs	r3, r3, #1
 80029e8:	3b01      	subs	r3, #1
 80029ea:	041b      	lsls	r3, r3, #16
 80029ec:	431a      	orrs	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	061b      	lsls	r3, r3, #24
 80029f4:	4928      	ldr	r1, [pc, #160]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80029fc:	4b26      	ldr	r3, [pc, #152]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a02:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	021b      	lsls	r3, r3, #8
 8002a0e:	4922      	ldr	r1, [pc, #136]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d01d      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a2a:	d118      	bne.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a2c:	4b1a      	ldr	r3, [pc, #104]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a32:	0e1b      	lsrs	r3, r3, #24
 8002a34:	f003 030f 	and.w	r3, r3, #15
 8002a38:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699a      	ldr	r2, [r3, #24]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	019b      	lsls	r3, r3, #6
 8002a44:	431a      	orrs	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	085b      	lsrs	r3, r3, #1
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	041b      	lsls	r3, r3, #16
 8002a50:	431a      	orrs	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	061b      	lsls	r3, r3, #24
 8002a56:	4910      	ldr	r1, [pc, #64]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a5e:	4b0f      	ldr	r3, [pc, #60]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002a60:	2201      	movs	r2, #1
 8002a62:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a64:	f7fe fa3c 	bl	8000ee0 <HAL_GetTick>
 8002a68:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002a6c:	f7fe fa38 	bl	8000ee0 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e007      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a7e:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a8a:	d1ef      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3730      	adds	r7, #48	; 0x30
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	42470070 	.word	0x42470070

08002aa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002aa4:	b0ae      	sub	sp, #184	; 0xb8
 8002aa6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ac6:	4bcb      	ldr	r3, [pc, #812]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 030c 	and.w	r3, r3, #12
 8002ace:	2b0c      	cmp	r3, #12
 8002ad0:	f200 8206 	bhi.w	8002ee0 <HAL_RCC_GetSysClockFreq+0x440>
 8002ad4:	a201      	add	r2, pc, #4	; (adr r2, 8002adc <HAL_RCC_GetSysClockFreq+0x3c>)
 8002ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ada:	bf00      	nop
 8002adc:	08002b11 	.word	0x08002b11
 8002ae0:	08002ee1 	.word	0x08002ee1
 8002ae4:	08002ee1 	.word	0x08002ee1
 8002ae8:	08002ee1 	.word	0x08002ee1
 8002aec:	08002b19 	.word	0x08002b19
 8002af0:	08002ee1 	.word	0x08002ee1
 8002af4:	08002ee1 	.word	0x08002ee1
 8002af8:	08002ee1 	.word	0x08002ee1
 8002afc:	08002b21 	.word	0x08002b21
 8002b00:	08002ee1 	.word	0x08002ee1
 8002b04:	08002ee1 	.word	0x08002ee1
 8002b08:	08002ee1 	.word	0x08002ee1
 8002b0c:	08002d11 	.word	0x08002d11
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b10:	4bb9      	ldr	r3, [pc, #740]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002b12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002b16:	e1e7      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b18:	4bb8      	ldr	r3, [pc, #736]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x35c>)
 8002b1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002b1e:	e1e3      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b20:	4bb4      	ldr	r3, [pc, #720]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b2c:	4bb1      	ldr	r3, [pc, #708]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d071      	beq.n	8002c1c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b38:	4bae      	ldr	r3, [pc, #696]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	099b      	lsrs	r3, r3, #6
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b44:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002b48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b54:	2300      	movs	r3, #0
 8002b56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002b5e:	4622      	mov	r2, r4
 8002b60:	462b      	mov	r3, r5
 8002b62:	f04f 0000 	mov.w	r0, #0
 8002b66:	f04f 0100 	mov.w	r1, #0
 8002b6a:	0159      	lsls	r1, r3, #5
 8002b6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b70:	0150      	lsls	r0, r2, #5
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	4621      	mov	r1, r4
 8002b78:	1a51      	subs	r1, r2, r1
 8002b7a:	6439      	str	r1, [r7, #64]	; 0x40
 8002b7c:	4629      	mov	r1, r5
 8002b7e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b82:	647b      	str	r3, [r7, #68]	; 0x44
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002b90:	4649      	mov	r1, r9
 8002b92:	018b      	lsls	r3, r1, #6
 8002b94:	4641      	mov	r1, r8
 8002b96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b9a:	4641      	mov	r1, r8
 8002b9c:	018a      	lsls	r2, r1, #6
 8002b9e:	4641      	mov	r1, r8
 8002ba0:	1a51      	subs	r1, r2, r1
 8002ba2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ba4:	4649      	mov	r1, r9
 8002ba6:	eb63 0301 	sbc.w	r3, r3, r1
 8002baa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002bb8:	4649      	mov	r1, r9
 8002bba:	00cb      	lsls	r3, r1, #3
 8002bbc:	4641      	mov	r1, r8
 8002bbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bc2:	4641      	mov	r1, r8
 8002bc4:	00ca      	lsls	r2, r1, #3
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4603      	mov	r3, r0
 8002bcc:	4622      	mov	r2, r4
 8002bce:	189b      	adds	r3, r3, r2
 8002bd0:	633b      	str	r3, [r7, #48]	; 0x30
 8002bd2:	462b      	mov	r3, r5
 8002bd4:	460a      	mov	r2, r1
 8002bd6:	eb42 0303 	adc.w	r3, r2, r3
 8002bda:	637b      	str	r3, [r7, #52]	; 0x34
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002be8:	4629      	mov	r1, r5
 8002bea:	024b      	lsls	r3, r1, #9
 8002bec:	4621      	mov	r1, r4
 8002bee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bf2:	4621      	mov	r1, r4
 8002bf4:	024a      	lsls	r2, r1, #9
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c04:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c08:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002c0c:	f7fd fafa 	bl	8000204 <__aeabi_uldivmod>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4613      	mov	r3, r2
 8002c16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c1a:	e067      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c1c:	4b75      	ldr	r3, [pc, #468]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	099b      	lsrs	r3, r3, #6
 8002c22:	2200      	movs	r2, #0
 8002c24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c28:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002c2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c34:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c36:	2300      	movs	r3, #0
 8002c38:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c3a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002c3e:	4622      	mov	r2, r4
 8002c40:	462b      	mov	r3, r5
 8002c42:	f04f 0000 	mov.w	r0, #0
 8002c46:	f04f 0100 	mov.w	r1, #0
 8002c4a:	0159      	lsls	r1, r3, #5
 8002c4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c50:	0150      	lsls	r0, r2, #5
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	4621      	mov	r1, r4
 8002c58:	1a51      	subs	r1, r2, r1
 8002c5a:	62b9      	str	r1, [r7, #40]	; 0x28
 8002c5c:	4629      	mov	r1, r5
 8002c5e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c64:	f04f 0200 	mov.w	r2, #0
 8002c68:	f04f 0300 	mov.w	r3, #0
 8002c6c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002c70:	4649      	mov	r1, r9
 8002c72:	018b      	lsls	r3, r1, #6
 8002c74:	4641      	mov	r1, r8
 8002c76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c7a:	4641      	mov	r1, r8
 8002c7c:	018a      	lsls	r2, r1, #6
 8002c7e:	4641      	mov	r1, r8
 8002c80:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c84:	4649      	mov	r1, r9
 8002c86:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	f04f 0300 	mov.w	r3, #0
 8002c92:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c96:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c9e:	4692      	mov	sl, r2
 8002ca0:	469b      	mov	fp, r3
 8002ca2:	4623      	mov	r3, r4
 8002ca4:	eb1a 0303 	adds.w	r3, sl, r3
 8002ca8:	623b      	str	r3, [r7, #32]
 8002caa:	462b      	mov	r3, r5
 8002cac:	eb4b 0303 	adc.w	r3, fp, r3
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002cbe:	4629      	mov	r1, r5
 8002cc0:	028b      	lsls	r3, r1, #10
 8002cc2:	4621      	mov	r1, r4
 8002cc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cc8:	4621      	mov	r1, r4
 8002cca:	028a      	lsls	r2, r1, #10
 8002ccc:	4610      	mov	r0, r2
 8002cce:	4619      	mov	r1, r3
 8002cd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	673b      	str	r3, [r7, #112]	; 0x70
 8002cd8:	677a      	str	r2, [r7, #116]	; 0x74
 8002cda:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002cde:	f7fd fa91 	bl	8000204 <__aeabi_uldivmod>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cec:	4b41      	ldr	r3, [pc, #260]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	0c1b      	lsrs	r3, r3, #16
 8002cf2:	f003 0303 	and.w	r3, r3, #3
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002cfe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d0e:	e0eb      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d10:	4b38      	ldr	r3, [pc, #224]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d1c:	4b35      	ldr	r3, [pc, #212]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d06b      	beq.n	8002e00 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d28:	4b32      	ldr	r3, [pc, #200]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	099b      	lsrs	r3, r3, #6
 8002d2e:	2200      	movs	r2, #0
 8002d30:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d32:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d3a:	663b      	str	r3, [r7, #96]	; 0x60
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	667b      	str	r3, [r7, #100]	; 0x64
 8002d40:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002d44:	4622      	mov	r2, r4
 8002d46:	462b      	mov	r3, r5
 8002d48:	f04f 0000 	mov.w	r0, #0
 8002d4c:	f04f 0100 	mov.w	r1, #0
 8002d50:	0159      	lsls	r1, r3, #5
 8002d52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d56:	0150      	lsls	r0, r2, #5
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4621      	mov	r1, r4
 8002d5e:	1a51      	subs	r1, r2, r1
 8002d60:	61b9      	str	r1, [r7, #24]
 8002d62:	4629      	mov	r1, r5
 8002d64:	eb63 0301 	sbc.w	r3, r3, r1
 8002d68:	61fb      	str	r3, [r7, #28]
 8002d6a:	f04f 0200 	mov.w	r2, #0
 8002d6e:	f04f 0300 	mov.w	r3, #0
 8002d72:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002d76:	4659      	mov	r1, fp
 8002d78:	018b      	lsls	r3, r1, #6
 8002d7a:	4651      	mov	r1, sl
 8002d7c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d80:	4651      	mov	r1, sl
 8002d82:	018a      	lsls	r2, r1, #6
 8002d84:	4651      	mov	r1, sl
 8002d86:	ebb2 0801 	subs.w	r8, r2, r1
 8002d8a:	4659      	mov	r1, fp
 8002d8c:	eb63 0901 	sbc.w	r9, r3, r1
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d9c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002da0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002da4:	4690      	mov	r8, r2
 8002da6:	4699      	mov	r9, r3
 8002da8:	4623      	mov	r3, r4
 8002daa:	eb18 0303 	adds.w	r3, r8, r3
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	462b      	mov	r3, r5
 8002db2:	eb49 0303 	adc.w	r3, r9, r3
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002dc4:	4629      	mov	r1, r5
 8002dc6:	024b      	lsls	r3, r1, #9
 8002dc8:	4621      	mov	r1, r4
 8002dca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dce:	4621      	mov	r1, r4
 8002dd0:	024a      	lsls	r2, r1, #9
 8002dd2:	4610      	mov	r0, r2
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002dda:	2200      	movs	r2, #0
 8002ddc:	65bb      	str	r3, [r7, #88]	; 0x58
 8002dde:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002de0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002de4:	f7fd fa0e 	bl	8000204 <__aeabi_uldivmod>
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	4613      	mov	r3, r2
 8002dee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002df2:	e065      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x420>
 8002df4:	40023800 	.word	0x40023800
 8002df8:	00f42400 	.word	0x00f42400
 8002dfc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e00:	4b3d      	ldr	r3, [pc, #244]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	099b      	lsrs	r3, r3, #6
 8002e06:	2200      	movs	r2, #0
 8002e08:	4618      	mov	r0, r3
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e10:	653b      	str	r3, [r7, #80]	; 0x50
 8002e12:	2300      	movs	r3, #0
 8002e14:	657b      	str	r3, [r7, #84]	; 0x54
 8002e16:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002e1a:	4642      	mov	r2, r8
 8002e1c:	464b      	mov	r3, r9
 8002e1e:	f04f 0000 	mov.w	r0, #0
 8002e22:	f04f 0100 	mov.w	r1, #0
 8002e26:	0159      	lsls	r1, r3, #5
 8002e28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e2c:	0150      	lsls	r0, r2, #5
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	4641      	mov	r1, r8
 8002e34:	1a51      	subs	r1, r2, r1
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	4649      	mov	r1, r9
 8002e3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002e4c:	4659      	mov	r1, fp
 8002e4e:	018b      	lsls	r3, r1, #6
 8002e50:	4651      	mov	r1, sl
 8002e52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e56:	4651      	mov	r1, sl
 8002e58:	018a      	lsls	r2, r1, #6
 8002e5a:	4651      	mov	r1, sl
 8002e5c:	1a54      	subs	r4, r2, r1
 8002e5e:	4659      	mov	r1, fp
 8002e60:	eb63 0501 	sbc.w	r5, r3, r1
 8002e64:	f04f 0200 	mov.w	r2, #0
 8002e68:	f04f 0300 	mov.w	r3, #0
 8002e6c:	00eb      	lsls	r3, r5, #3
 8002e6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e72:	00e2      	lsls	r2, r4, #3
 8002e74:	4614      	mov	r4, r2
 8002e76:	461d      	mov	r5, r3
 8002e78:	4643      	mov	r3, r8
 8002e7a:	18e3      	adds	r3, r4, r3
 8002e7c:	603b      	str	r3, [r7, #0]
 8002e7e:	464b      	mov	r3, r9
 8002e80:	eb45 0303 	adc.w	r3, r5, r3
 8002e84:	607b      	str	r3, [r7, #4]
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	f04f 0300 	mov.w	r3, #0
 8002e8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e92:	4629      	mov	r1, r5
 8002e94:	028b      	lsls	r3, r1, #10
 8002e96:	4621      	mov	r1, r4
 8002e98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e9c:	4621      	mov	r1, r4
 8002e9e:	028a      	lsls	r2, r1, #10
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8002eac:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002eae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002eb2:	f7fd f9a7 	bl	8000204 <__aeabi_uldivmod>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4613      	mov	r3, r2
 8002ebc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002ec0:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	0f1b      	lsrs	r3, r3, #28
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002ece:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ed2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ede:	e003      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ee0:	4b06      	ldr	r3, [pc, #24]	; (8002efc <HAL_RCC_GetSysClockFreq+0x45c>)
 8002ee2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ee6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ee8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	37b8      	adds	r7, #184	; 0xb8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	00f42400 	.word	0x00f42400

08002f00 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e28d      	b.n	800342e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 8083 	beq.w	8003026 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f20:	4b94      	ldr	r3, [pc, #592]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 030c 	and.w	r3, r3, #12
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d019      	beq.n	8002f60 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f2c:	4b91      	ldr	r3, [pc, #580]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f34:	2b08      	cmp	r3, #8
 8002f36:	d106      	bne.n	8002f46 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f38:	4b8e      	ldr	r3, [pc, #568]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f44:	d00c      	beq.n	8002f60 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f46:	4b8b      	ldr	r3, [pc, #556]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f4e:	2b0c      	cmp	r3, #12
 8002f50:	d112      	bne.n	8002f78 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f52:	4b88      	ldr	r3, [pc, #544]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f5e:	d10b      	bne.n	8002f78 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f60:	4b84      	ldr	r3, [pc, #528]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d05b      	beq.n	8003024 <HAL_RCC_OscConfig+0x124>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d157      	bne.n	8003024 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e25a      	b.n	800342e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f80:	d106      	bne.n	8002f90 <HAL_RCC_OscConfig+0x90>
 8002f82:	4b7c      	ldr	r3, [pc, #496]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a7b      	ldr	r2, [pc, #492]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 8002f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	e01d      	b.n	8002fcc <HAL_RCC_OscConfig+0xcc>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f98:	d10c      	bne.n	8002fb4 <HAL_RCC_OscConfig+0xb4>
 8002f9a:	4b76      	ldr	r3, [pc, #472]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a75      	ldr	r2, [pc, #468]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 8002fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fa4:	6013      	str	r3, [r2, #0]
 8002fa6:	4b73      	ldr	r3, [pc, #460]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a72      	ldr	r2, [pc, #456]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 8002fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb0:	6013      	str	r3, [r2, #0]
 8002fb2:	e00b      	b.n	8002fcc <HAL_RCC_OscConfig+0xcc>
 8002fb4:	4b6f      	ldr	r3, [pc, #444]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a6e      	ldr	r2, [pc, #440]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 8002fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fbe:	6013      	str	r3, [r2, #0]
 8002fc0:	4b6c      	ldr	r3, [pc, #432]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a6b      	ldr	r2, [pc, #428]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 8002fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d013      	beq.n	8002ffc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd4:	f7fd ff84 	bl	8000ee0 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fdc:	f7fd ff80 	bl	8000ee0 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b64      	cmp	r3, #100	; 0x64
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e21f      	b.n	800342e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fee:	4b61      	ldr	r3, [pc, #388]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d0f0      	beq.n	8002fdc <HAL_RCC_OscConfig+0xdc>
 8002ffa:	e014      	b.n	8003026 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffc:	f7fd ff70 	bl	8000ee0 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003004:	f7fd ff6c 	bl	8000ee0 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b64      	cmp	r3, #100	; 0x64
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e20b      	b.n	800342e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003016:	4b57      	ldr	r3, [pc, #348]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f0      	bne.n	8003004 <HAL_RCC_OscConfig+0x104>
 8003022:	e000      	b.n	8003026 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d06f      	beq.n	8003112 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003032:	4b50      	ldr	r3, [pc, #320]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 030c 	and.w	r3, r3, #12
 800303a:	2b00      	cmp	r3, #0
 800303c:	d017      	beq.n	800306e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800303e:	4b4d      	ldr	r3, [pc, #308]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003046:	2b08      	cmp	r3, #8
 8003048:	d105      	bne.n	8003056 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800304a:	4b4a      	ldr	r3, [pc, #296]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00b      	beq.n	800306e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003056:	4b47      	ldr	r3, [pc, #284]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800305e:	2b0c      	cmp	r3, #12
 8003060:	d11c      	bne.n	800309c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003062:	4b44      	ldr	r3, [pc, #272]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d116      	bne.n	800309c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800306e:	4b41      	ldr	r3, [pc, #260]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d005      	beq.n	8003086 <HAL_RCC_OscConfig+0x186>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d001      	beq.n	8003086 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e1d3      	b.n	800342e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003086:	4b3b      	ldr	r3, [pc, #236]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	4937      	ldr	r1, [pc, #220]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 8003096:	4313      	orrs	r3, r2
 8003098:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800309a:	e03a      	b.n	8003112 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d020      	beq.n	80030e6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030a4:	4b34      	ldr	r3, [pc, #208]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 80030a6:	2201      	movs	r2, #1
 80030a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030aa:	f7fd ff19 	bl	8000ee0 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030b2:	f7fd ff15 	bl	8000ee0 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e1b4      	b.n	800342e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c4:	4b2b      	ldr	r3, [pc, #172]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0f0      	beq.n	80030b2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d0:	4b28      	ldr	r3, [pc, #160]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	4925      	ldr	r1, [pc, #148]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	600b      	str	r3, [r1, #0]
 80030e4:	e015      	b.n	8003112 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030e6:	4b24      	ldr	r3, [pc, #144]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ec:	f7fd fef8 	bl	8000ee0 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030f4:	f7fd fef4 	bl	8000ee0 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e193      	b.n	800342e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003106:	4b1b      	ldr	r3, [pc, #108]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	2b00      	cmp	r3, #0
 800311c:	d036      	beq.n	800318c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d016      	beq.n	8003154 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003126:	4b15      	ldr	r3, [pc, #84]	; (800317c <HAL_RCC_OscConfig+0x27c>)
 8003128:	2201      	movs	r2, #1
 800312a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312c:	f7fd fed8 	bl	8000ee0 <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003134:	f7fd fed4 	bl	8000ee0 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e173      	b.n	800342e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003146:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 8003148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0f0      	beq.n	8003134 <HAL_RCC_OscConfig+0x234>
 8003152:	e01b      	b.n	800318c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003154:	4b09      	ldr	r3, [pc, #36]	; (800317c <HAL_RCC_OscConfig+0x27c>)
 8003156:	2200      	movs	r2, #0
 8003158:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315a:	f7fd fec1 	bl	8000ee0 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003160:	e00e      	b.n	8003180 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003162:	f7fd febd 	bl	8000ee0 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d907      	bls.n	8003180 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e15c      	b.n	800342e <HAL_RCC_OscConfig+0x52e>
 8003174:	40023800 	.word	0x40023800
 8003178:	42470000 	.word	0x42470000
 800317c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003180:	4b8a      	ldr	r3, [pc, #552]	; (80033ac <HAL_RCC_OscConfig+0x4ac>)
 8003182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1ea      	bne.n	8003162 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 8097 	beq.w	80032c8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800319a:	2300      	movs	r3, #0
 800319c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800319e:	4b83      	ldr	r3, [pc, #524]	; (80033ac <HAL_RCC_OscConfig+0x4ac>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10f      	bne.n	80031ca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031aa:	2300      	movs	r3, #0
 80031ac:	60bb      	str	r3, [r7, #8]
 80031ae:	4b7f      	ldr	r3, [pc, #508]	; (80033ac <HAL_RCC_OscConfig+0x4ac>)
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	4a7e      	ldr	r2, [pc, #504]	; (80033ac <HAL_RCC_OscConfig+0x4ac>)
 80031b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b8:	6413      	str	r3, [r2, #64]	; 0x40
 80031ba:	4b7c      	ldr	r3, [pc, #496]	; (80033ac <HAL_RCC_OscConfig+0x4ac>)
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c2:	60bb      	str	r3, [r7, #8]
 80031c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031c6:	2301      	movs	r3, #1
 80031c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ca:	4b79      	ldr	r3, [pc, #484]	; (80033b0 <HAL_RCC_OscConfig+0x4b0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d118      	bne.n	8003208 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031d6:	4b76      	ldr	r3, [pc, #472]	; (80033b0 <HAL_RCC_OscConfig+0x4b0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a75      	ldr	r2, [pc, #468]	; (80033b0 <HAL_RCC_OscConfig+0x4b0>)
 80031dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031e2:	f7fd fe7d 	bl	8000ee0 <HAL_GetTick>
 80031e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e8:	e008      	b.n	80031fc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ea:	f7fd fe79 	bl	8000ee0 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e118      	b.n	800342e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031fc:	4b6c      	ldr	r3, [pc, #432]	; (80033b0 <HAL_RCC_OscConfig+0x4b0>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003204:	2b00      	cmp	r3, #0
 8003206:	d0f0      	beq.n	80031ea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d106      	bne.n	800321e <HAL_RCC_OscConfig+0x31e>
 8003210:	4b66      	ldr	r3, [pc, #408]	; (80033ac <HAL_RCC_OscConfig+0x4ac>)
 8003212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003214:	4a65      	ldr	r2, [pc, #404]	; (80033ac <HAL_RCC_OscConfig+0x4ac>)
 8003216:	f043 0301 	orr.w	r3, r3, #1
 800321a:	6713      	str	r3, [r2, #112]	; 0x70
 800321c:	e01c      	b.n	8003258 <HAL_RCC_OscConfig+0x358>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	2b05      	cmp	r3, #5
 8003224:	d10c      	bne.n	8003240 <HAL_RCC_OscConfig+0x340>
 8003226:	4b61      	ldr	r3, [pc, #388]	; (80033ac <HAL_RCC_OscConfig+0x4ac>)
 8003228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322a:	4a60      	ldr	r2, [pc, #384]	; (80033ac <HAL_RCC_OscConfig+0x4ac>)
 800322c:	f043 0304 	orr.w	r3, r3, #4
 8003230:	6713      	str	r3, [r2, #112]	; 0x70
 8003232:	4b5e      	ldr	r3, [pc, #376]	; (80033ac <HAL_RCC_OscConfig+0x4ac>)
 8003234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003236:	4a5d      	ldr	r2, [pc, #372]	; (80033ac <HAL_RCC_OscConfig+0x4ac>)
 8003238:	f043 0301 	orr.w	r3, r3, #1
 800323c:	6713      	str	r3, [r2, #112]	; 0x70
 800323e:	e00b      	b.n	8003258 <HAL_RCC_OscConfig+0x358>
 8003240:	4b5a      	ldr	r3, [pc, #360]	; (80033ac <HAL_RCC_OscConfig+0x4ac>)
 8003242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003244:	4a59      	ldr	r2, [pc, #356]	; (80033ac <HAL_RCC_OscConfig+0x4ac>)
 8003246:	f023 0301 	bic.w	r3, r3, #1
 800324a:	6713      	str	r3, [r2, #112]	; 0x70
 800324c:	4b57      	ldr	r3, [pc, #348]	; (80033ac <HAL_RCC_OscConfig+0x4ac>)
 800324e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003250:	4a56      	ldr	r2, [pc, #344]	; (80033ac <HAL_RCC_OscConfig+0x4ac>)
 8003252:	f023 0304 	bic.w	r3, r3, #4
 8003256:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d015      	beq.n	800328c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003260:	f7fd fe3e 	bl	8000ee0 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003266:	e00a      	b.n	800327e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003268:	f7fd fe3a 	bl	8000ee0 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	f241 3288 	movw	r2, #5000	; 0x1388
 8003276:	4293      	cmp	r3, r2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e0d7      	b.n	800342e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800327e:	4b4b      	ldr	r3, [pc, #300]	; (80033ac <HAL_RCC_OscConfig+0x4ac>)
 8003280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0ee      	beq.n	8003268 <HAL_RCC_OscConfig+0x368>
 800328a:	e014      	b.n	80032b6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328c:	f7fd fe28 	bl	8000ee0 <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003292:	e00a      	b.n	80032aa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003294:	f7fd fe24 	bl	8000ee0 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e0c1      	b.n	800342e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032aa:	4b40      	ldr	r3, [pc, #256]	; (80033ac <HAL_RCC_OscConfig+0x4ac>)
 80032ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1ee      	bne.n	8003294 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032b6:	7dfb      	ldrb	r3, [r7, #23]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d105      	bne.n	80032c8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032bc:	4b3b      	ldr	r3, [pc, #236]	; (80033ac <HAL_RCC_OscConfig+0x4ac>)
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	4a3a      	ldr	r2, [pc, #232]	; (80033ac <HAL_RCC_OscConfig+0x4ac>)
 80032c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 80ad 	beq.w	800342c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032d2:	4b36      	ldr	r3, [pc, #216]	; (80033ac <HAL_RCC_OscConfig+0x4ac>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	2b08      	cmp	r3, #8
 80032dc:	d060      	beq.n	80033a0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d145      	bne.n	8003372 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e6:	4b33      	ldr	r3, [pc, #204]	; (80033b4 <HAL_RCC_OscConfig+0x4b4>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ec:	f7fd fdf8 	bl	8000ee0 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032f4:	f7fd fdf4 	bl	8000ee0 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e093      	b.n	800342e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003306:	4b29      	ldr	r3, [pc, #164]	; (80033ac <HAL_RCC_OscConfig+0x4ac>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f0      	bne.n	80032f4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69da      	ldr	r2, [r3, #28]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	019b      	lsls	r3, r3, #6
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003328:	085b      	lsrs	r3, r3, #1
 800332a:	3b01      	subs	r3, #1
 800332c:	041b      	lsls	r3, r3, #16
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	061b      	lsls	r3, r3, #24
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333c:	071b      	lsls	r3, r3, #28
 800333e:	491b      	ldr	r1, [pc, #108]	; (80033ac <HAL_RCC_OscConfig+0x4ac>)
 8003340:	4313      	orrs	r3, r2
 8003342:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003344:	4b1b      	ldr	r3, [pc, #108]	; (80033b4 <HAL_RCC_OscConfig+0x4b4>)
 8003346:	2201      	movs	r2, #1
 8003348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334a:	f7fd fdc9 	bl	8000ee0 <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003352:	f7fd fdc5 	bl	8000ee0 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e064      	b.n	800342e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003364:	4b11      	ldr	r3, [pc, #68]	; (80033ac <HAL_RCC_OscConfig+0x4ac>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0f0      	beq.n	8003352 <HAL_RCC_OscConfig+0x452>
 8003370:	e05c      	b.n	800342c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003372:	4b10      	ldr	r3, [pc, #64]	; (80033b4 <HAL_RCC_OscConfig+0x4b4>)
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003378:	f7fd fdb2 	bl	8000ee0 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003380:	f7fd fdae 	bl	8000ee0 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e04d      	b.n	800342e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003392:	4b06      	ldr	r3, [pc, #24]	; (80033ac <HAL_RCC_OscConfig+0x4ac>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f0      	bne.n	8003380 <HAL_RCC_OscConfig+0x480>
 800339e:	e045      	b.n	800342c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d107      	bne.n	80033b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e040      	b.n	800342e <HAL_RCC_OscConfig+0x52e>
 80033ac:	40023800 	.word	0x40023800
 80033b0:	40007000 	.word	0x40007000
 80033b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033b8:	4b1f      	ldr	r3, [pc, #124]	; (8003438 <HAL_RCC_OscConfig+0x538>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d030      	beq.n	8003428 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d129      	bne.n	8003428 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033de:	429a      	cmp	r2, r3
 80033e0:	d122      	bne.n	8003428 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033e8:	4013      	ands	r3, r2
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d119      	bne.n	8003428 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fe:	085b      	lsrs	r3, r3, #1
 8003400:	3b01      	subs	r3, #1
 8003402:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003404:	429a      	cmp	r2, r3
 8003406:	d10f      	bne.n	8003428 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003412:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003414:	429a      	cmp	r2, r3
 8003416:	d107      	bne.n	8003428 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003424:	429a      	cmp	r2, r3
 8003426:	d001      	beq.n	800342c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e000      	b.n	800342e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40023800 	.word	0x40023800

0800343c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e041      	b.n	80034d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d106      	bne.n	8003468 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7fd fb8e 	bl	8000b84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3304      	adds	r3, #4
 8003478:	4619      	mov	r1, r3
 800347a:	4610      	mov	r0, r2
 800347c:	f000 f95e 	bl	800373c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
	...

080034dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d001      	beq.n	80034f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e046      	b.n	8003582 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2202      	movs	r2, #2
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a23      	ldr	r2, [pc, #140]	; (8003590 <HAL_TIM_Base_Start+0xb4>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d022      	beq.n	800354c <HAL_TIM_Base_Start+0x70>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800350e:	d01d      	beq.n	800354c <HAL_TIM_Base_Start+0x70>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a1f      	ldr	r2, [pc, #124]	; (8003594 <HAL_TIM_Base_Start+0xb8>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d018      	beq.n	800354c <HAL_TIM_Base_Start+0x70>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a1e      	ldr	r2, [pc, #120]	; (8003598 <HAL_TIM_Base_Start+0xbc>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d013      	beq.n	800354c <HAL_TIM_Base_Start+0x70>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a1c      	ldr	r2, [pc, #112]	; (800359c <HAL_TIM_Base_Start+0xc0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d00e      	beq.n	800354c <HAL_TIM_Base_Start+0x70>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a1b      	ldr	r2, [pc, #108]	; (80035a0 <HAL_TIM_Base_Start+0xc4>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d009      	beq.n	800354c <HAL_TIM_Base_Start+0x70>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a19      	ldr	r2, [pc, #100]	; (80035a4 <HAL_TIM_Base_Start+0xc8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d004      	beq.n	800354c <HAL_TIM_Base_Start+0x70>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a18      	ldr	r2, [pc, #96]	; (80035a8 <HAL_TIM_Base_Start+0xcc>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d111      	bne.n	8003570 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2b06      	cmp	r3, #6
 800355c:	d010      	beq.n	8003580 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 0201 	orr.w	r2, r2, #1
 800356c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800356e:	e007      	b.n	8003580 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f042 0201 	orr.w	r2, r2, #1
 800357e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	40010000 	.word	0x40010000
 8003594:	40000400 	.word	0x40000400
 8003598:	40000800 	.word	0x40000800
 800359c:	40000c00 	.word	0x40000c00
 80035a0:	40010400 	.word	0x40010400
 80035a4:	40014000 	.word	0x40014000
 80035a8:	40001800 	.word	0x40001800

080035ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d101      	bne.n	80035c8 <HAL_TIM_ConfigClockSource+0x1c>
 80035c4:	2302      	movs	r3, #2
 80035c6:	e0b4      	b.n	8003732 <HAL_TIM_ConfigClockSource+0x186>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003600:	d03e      	beq.n	8003680 <HAL_TIM_ConfigClockSource+0xd4>
 8003602:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003606:	f200 8087 	bhi.w	8003718 <HAL_TIM_ConfigClockSource+0x16c>
 800360a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800360e:	f000 8086 	beq.w	800371e <HAL_TIM_ConfigClockSource+0x172>
 8003612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003616:	d87f      	bhi.n	8003718 <HAL_TIM_ConfigClockSource+0x16c>
 8003618:	2b70      	cmp	r3, #112	; 0x70
 800361a:	d01a      	beq.n	8003652 <HAL_TIM_ConfigClockSource+0xa6>
 800361c:	2b70      	cmp	r3, #112	; 0x70
 800361e:	d87b      	bhi.n	8003718 <HAL_TIM_ConfigClockSource+0x16c>
 8003620:	2b60      	cmp	r3, #96	; 0x60
 8003622:	d050      	beq.n	80036c6 <HAL_TIM_ConfigClockSource+0x11a>
 8003624:	2b60      	cmp	r3, #96	; 0x60
 8003626:	d877      	bhi.n	8003718 <HAL_TIM_ConfigClockSource+0x16c>
 8003628:	2b50      	cmp	r3, #80	; 0x50
 800362a:	d03c      	beq.n	80036a6 <HAL_TIM_ConfigClockSource+0xfa>
 800362c:	2b50      	cmp	r3, #80	; 0x50
 800362e:	d873      	bhi.n	8003718 <HAL_TIM_ConfigClockSource+0x16c>
 8003630:	2b40      	cmp	r3, #64	; 0x40
 8003632:	d058      	beq.n	80036e6 <HAL_TIM_ConfigClockSource+0x13a>
 8003634:	2b40      	cmp	r3, #64	; 0x40
 8003636:	d86f      	bhi.n	8003718 <HAL_TIM_ConfigClockSource+0x16c>
 8003638:	2b30      	cmp	r3, #48	; 0x30
 800363a:	d064      	beq.n	8003706 <HAL_TIM_ConfigClockSource+0x15a>
 800363c:	2b30      	cmp	r3, #48	; 0x30
 800363e:	d86b      	bhi.n	8003718 <HAL_TIM_ConfigClockSource+0x16c>
 8003640:	2b20      	cmp	r3, #32
 8003642:	d060      	beq.n	8003706 <HAL_TIM_ConfigClockSource+0x15a>
 8003644:	2b20      	cmp	r3, #32
 8003646:	d867      	bhi.n	8003718 <HAL_TIM_ConfigClockSource+0x16c>
 8003648:	2b00      	cmp	r3, #0
 800364a:	d05c      	beq.n	8003706 <HAL_TIM_ConfigClockSource+0x15a>
 800364c:	2b10      	cmp	r3, #16
 800364e:	d05a      	beq.n	8003706 <HAL_TIM_ConfigClockSource+0x15a>
 8003650:	e062      	b.n	8003718 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6818      	ldr	r0, [r3, #0]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	6899      	ldr	r1, [r3, #8]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f000 f985 	bl	8003970 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003674:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	609a      	str	r2, [r3, #8]
      break;
 800367e:	e04f      	b.n	8003720 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6818      	ldr	r0, [r3, #0]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	6899      	ldr	r1, [r3, #8]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f000 f96e 	bl	8003970 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036a2:	609a      	str	r2, [r3, #8]
      break;
 80036a4:	e03c      	b.n	8003720 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6818      	ldr	r0, [r3, #0]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	6859      	ldr	r1, [r3, #4]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	461a      	mov	r2, r3
 80036b4:	f000 f8e2 	bl	800387c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2150      	movs	r1, #80	; 0x50
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 f93b 	bl	800393a <TIM_ITRx_SetConfig>
      break;
 80036c4:	e02c      	b.n	8003720 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6818      	ldr	r0, [r3, #0]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	6859      	ldr	r1, [r3, #4]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	461a      	mov	r2, r3
 80036d4:	f000 f901 	bl	80038da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2160      	movs	r1, #96	; 0x60
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 f92b 	bl	800393a <TIM_ITRx_SetConfig>
      break;
 80036e4:	e01c      	b.n	8003720 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6818      	ldr	r0, [r3, #0]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	6859      	ldr	r1, [r3, #4]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	461a      	mov	r2, r3
 80036f4:	f000 f8c2 	bl	800387c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2140      	movs	r1, #64	; 0x40
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 f91b 	bl	800393a <TIM_ITRx_SetConfig>
      break;
 8003704:	e00c      	b.n	8003720 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4619      	mov	r1, r3
 8003710:	4610      	mov	r0, r2
 8003712:	f000 f912 	bl	800393a <TIM_ITRx_SetConfig>
      break;
 8003716:	e003      	b.n	8003720 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	73fb      	strb	r3, [r7, #15]
      break;
 800371c:	e000      	b.n	8003720 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800371e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003730:	7bfb      	ldrb	r3, [r7, #15]
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
	...

0800373c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a40      	ldr	r2, [pc, #256]	; (8003850 <TIM_Base_SetConfig+0x114>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d013      	beq.n	800377c <TIM_Base_SetConfig+0x40>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800375a:	d00f      	beq.n	800377c <TIM_Base_SetConfig+0x40>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a3d      	ldr	r2, [pc, #244]	; (8003854 <TIM_Base_SetConfig+0x118>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d00b      	beq.n	800377c <TIM_Base_SetConfig+0x40>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a3c      	ldr	r2, [pc, #240]	; (8003858 <TIM_Base_SetConfig+0x11c>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d007      	beq.n	800377c <TIM_Base_SetConfig+0x40>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a3b      	ldr	r2, [pc, #236]	; (800385c <TIM_Base_SetConfig+0x120>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d003      	beq.n	800377c <TIM_Base_SetConfig+0x40>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a3a      	ldr	r2, [pc, #232]	; (8003860 <TIM_Base_SetConfig+0x124>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d108      	bne.n	800378e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003782:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	4313      	orrs	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a2f      	ldr	r2, [pc, #188]	; (8003850 <TIM_Base_SetConfig+0x114>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d02b      	beq.n	80037ee <TIM_Base_SetConfig+0xb2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800379c:	d027      	beq.n	80037ee <TIM_Base_SetConfig+0xb2>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a2c      	ldr	r2, [pc, #176]	; (8003854 <TIM_Base_SetConfig+0x118>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d023      	beq.n	80037ee <TIM_Base_SetConfig+0xb2>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a2b      	ldr	r2, [pc, #172]	; (8003858 <TIM_Base_SetConfig+0x11c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d01f      	beq.n	80037ee <TIM_Base_SetConfig+0xb2>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a2a      	ldr	r2, [pc, #168]	; (800385c <TIM_Base_SetConfig+0x120>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d01b      	beq.n	80037ee <TIM_Base_SetConfig+0xb2>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a29      	ldr	r2, [pc, #164]	; (8003860 <TIM_Base_SetConfig+0x124>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d017      	beq.n	80037ee <TIM_Base_SetConfig+0xb2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a28      	ldr	r2, [pc, #160]	; (8003864 <TIM_Base_SetConfig+0x128>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d013      	beq.n	80037ee <TIM_Base_SetConfig+0xb2>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a27      	ldr	r2, [pc, #156]	; (8003868 <TIM_Base_SetConfig+0x12c>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d00f      	beq.n	80037ee <TIM_Base_SetConfig+0xb2>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a26      	ldr	r2, [pc, #152]	; (800386c <TIM_Base_SetConfig+0x130>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d00b      	beq.n	80037ee <TIM_Base_SetConfig+0xb2>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a25      	ldr	r2, [pc, #148]	; (8003870 <TIM_Base_SetConfig+0x134>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d007      	beq.n	80037ee <TIM_Base_SetConfig+0xb2>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a24      	ldr	r2, [pc, #144]	; (8003874 <TIM_Base_SetConfig+0x138>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d003      	beq.n	80037ee <TIM_Base_SetConfig+0xb2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a23      	ldr	r2, [pc, #140]	; (8003878 <TIM_Base_SetConfig+0x13c>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d108      	bne.n	8003800 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	4313      	orrs	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a0a      	ldr	r2, [pc, #40]	; (8003850 <TIM_Base_SetConfig+0x114>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d003      	beq.n	8003834 <TIM_Base_SetConfig+0xf8>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a0c      	ldr	r2, [pc, #48]	; (8003860 <TIM_Base_SetConfig+0x124>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d103      	bne.n	800383c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	691a      	ldr	r2, [r3, #16]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	615a      	str	r2, [r3, #20]
}
 8003842:	bf00      	nop
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	40010000 	.word	0x40010000
 8003854:	40000400 	.word	0x40000400
 8003858:	40000800 	.word	0x40000800
 800385c:	40000c00 	.word	0x40000c00
 8003860:	40010400 	.word	0x40010400
 8003864:	40014000 	.word	0x40014000
 8003868:	40014400 	.word	0x40014400
 800386c:	40014800 	.word	0x40014800
 8003870:	40001800 	.word	0x40001800
 8003874:	40001c00 	.word	0x40001c00
 8003878:	40002000 	.word	0x40002000

0800387c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800387c:	b480      	push	{r7}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	f023 0201 	bic.w	r2, r3, #1
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	011b      	lsls	r3, r3, #4
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f023 030a 	bic.w	r3, r3, #10
 80038b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	4313      	orrs	r3, r2
 80038c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	621a      	str	r2, [r3, #32]
}
 80038ce:	bf00      	nop
 80038d0:	371c      	adds	r7, #28
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038da:	b480      	push	{r7}
 80038dc:	b087      	sub	sp, #28
 80038de:	af00      	add	r7, sp, #0
 80038e0:	60f8      	str	r0, [r7, #12]
 80038e2:	60b9      	str	r1, [r7, #8]
 80038e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	f023 0210 	bic.w	r2, r3, #16
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003904:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	031b      	lsls	r3, r3, #12
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	4313      	orrs	r3, r2
 800390e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003916:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	621a      	str	r2, [r3, #32]
}
 800392e:	bf00      	nop
 8003930:	371c      	adds	r7, #28
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800393a:	b480      	push	{r7}
 800393c:	b085      	sub	sp, #20
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
 8003942:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003950:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	f043 0307 	orr.w	r3, r3, #7
 800395c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	609a      	str	r2, [r3, #8]
}
 8003964:	bf00      	nop
 8003966:	3714      	adds	r7, #20
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
 800397c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800398a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	021a      	lsls	r2, r3, #8
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	431a      	orrs	r2, r3
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	4313      	orrs	r3, r2
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	4313      	orrs	r3, r2
 800399c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	609a      	str	r2, [r3, #8]
}
 80039a4:	bf00      	nop
 80039a6:	371c      	adds	r7, #28
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039c4:	2302      	movs	r3, #2
 80039c6:	e05a      	b.n	8003a7e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2202      	movs	r2, #2
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a21      	ldr	r2, [pc, #132]	; (8003a8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d022      	beq.n	8003a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a14:	d01d      	beq.n	8003a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a1d      	ldr	r2, [pc, #116]	; (8003a90 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d018      	beq.n	8003a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a1b      	ldr	r2, [pc, #108]	; (8003a94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d013      	beq.n	8003a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a1a      	ldr	r2, [pc, #104]	; (8003a98 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00e      	beq.n	8003a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a18      	ldr	r2, [pc, #96]	; (8003a9c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d009      	beq.n	8003a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a17      	ldr	r2, [pc, #92]	; (8003aa0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d004      	beq.n	8003a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a15      	ldr	r2, [pc, #84]	; (8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d10c      	bne.n	8003a6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	40010000 	.word	0x40010000
 8003a90:	40000400 	.word	0x40000400
 8003a94:	40000800 	.word	0x40000800
 8003a98:	40000c00 	.word	0x40000c00
 8003a9c:	40010400 	.word	0x40010400
 8003aa0:	40014000 	.word	0x40014000
 8003aa4:	40001800 	.word	0x40001800

08003aa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e03f      	b.n	8003b3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d106      	bne.n	8003ad4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fd f878 	bl	8000bc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2224      	movs	r2, #36	; 0x24
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f829 	bl	8003b44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	691a      	ldr	r2, [r3, #16]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695a      	ldr	r2, [r3, #20]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68da      	ldr	r2, [r3, #12]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2220      	movs	r2, #32
 8003b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
	...

08003b44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b48:	b0c0      	sub	sp, #256	; 0x100
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b60:	68d9      	ldr	r1, [r3, #12]
 8003b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	ea40 0301 	orr.w	r3, r0, r1
 8003b6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	431a      	orrs	r2, r3
 8003b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b9c:	f021 010c 	bic.w	r1, r1, #12
 8003ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003baa:	430b      	orrs	r3, r1
 8003bac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bbe:	6999      	ldr	r1, [r3, #24]
 8003bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	ea40 0301 	orr.w	r3, r0, r1
 8003bca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	4b8f      	ldr	r3, [pc, #572]	; (8003e10 <UART_SetConfig+0x2cc>)
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d005      	beq.n	8003be4 <UART_SetConfig+0xa0>
 8003bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	4b8d      	ldr	r3, [pc, #564]	; (8003e14 <UART_SetConfig+0x2d0>)
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d104      	bne.n	8003bee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003be4:	f7fe fc1e 	bl	8002424 <HAL_RCC_GetPCLK2Freq>
 8003be8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003bec:	e003      	b.n	8003bf6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bee:	f7fe fc05 	bl	80023fc <HAL_RCC_GetPCLK1Freq>
 8003bf2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c00:	f040 810c 	bne.w	8003e1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c16:	4622      	mov	r2, r4
 8003c18:	462b      	mov	r3, r5
 8003c1a:	1891      	adds	r1, r2, r2
 8003c1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c1e:	415b      	adcs	r3, r3
 8003c20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c26:	4621      	mov	r1, r4
 8003c28:	eb12 0801 	adds.w	r8, r2, r1
 8003c2c:	4629      	mov	r1, r5
 8003c2e:	eb43 0901 	adc.w	r9, r3, r1
 8003c32:	f04f 0200 	mov.w	r2, #0
 8003c36:	f04f 0300 	mov.w	r3, #0
 8003c3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c46:	4690      	mov	r8, r2
 8003c48:	4699      	mov	r9, r3
 8003c4a:	4623      	mov	r3, r4
 8003c4c:	eb18 0303 	adds.w	r3, r8, r3
 8003c50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c54:	462b      	mov	r3, r5
 8003c56:	eb49 0303 	adc.w	r3, r9, r3
 8003c5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c72:	460b      	mov	r3, r1
 8003c74:	18db      	adds	r3, r3, r3
 8003c76:	653b      	str	r3, [r7, #80]	; 0x50
 8003c78:	4613      	mov	r3, r2
 8003c7a:	eb42 0303 	adc.w	r3, r2, r3
 8003c7e:	657b      	str	r3, [r7, #84]	; 0x54
 8003c80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c88:	f7fc fabc 	bl	8000204 <__aeabi_uldivmod>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	4b61      	ldr	r3, [pc, #388]	; (8003e18 <UART_SetConfig+0x2d4>)
 8003c92:	fba3 2302 	umull	r2, r3, r3, r2
 8003c96:	095b      	lsrs	r3, r3, #5
 8003c98:	011c      	lsls	r4, r3, #4
 8003c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ca4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ca8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003cac:	4642      	mov	r2, r8
 8003cae:	464b      	mov	r3, r9
 8003cb0:	1891      	adds	r1, r2, r2
 8003cb2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003cb4:	415b      	adcs	r3, r3
 8003cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003cbc:	4641      	mov	r1, r8
 8003cbe:	eb12 0a01 	adds.w	sl, r2, r1
 8003cc2:	4649      	mov	r1, r9
 8003cc4:	eb43 0b01 	adc.w	fp, r3, r1
 8003cc8:	f04f 0200 	mov.w	r2, #0
 8003ccc:	f04f 0300 	mov.w	r3, #0
 8003cd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003cd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cdc:	4692      	mov	sl, r2
 8003cde:	469b      	mov	fp, r3
 8003ce0:	4643      	mov	r3, r8
 8003ce2:	eb1a 0303 	adds.w	r3, sl, r3
 8003ce6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cea:	464b      	mov	r3, r9
 8003cec:	eb4b 0303 	adc.w	r3, fp, r3
 8003cf0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	18db      	adds	r3, r3, r3
 8003d0c:	643b      	str	r3, [r7, #64]	; 0x40
 8003d0e:	4613      	mov	r3, r2
 8003d10:	eb42 0303 	adc.w	r3, r2, r3
 8003d14:	647b      	str	r3, [r7, #68]	; 0x44
 8003d16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d1e:	f7fc fa71 	bl	8000204 <__aeabi_uldivmod>
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	4611      	mov	r1, r2
 8003d28:	4b3b      	ldr	r3, [pc, #236]	; (8003e18 <UART_SetConfig+0x2d4>)
 8003d2a:	fba3 2301 	umull	r2, r3, r3, r1
 8003d2e:	095b      	lsrs	r3, r3, #5
 8003d30:	2264      	movs	r2, #100	; 0x64
 8003d32:	fb02 f303 	mul.w	r3, r2, r3
 8003d36:	1acb      	subs	r3, r1, r3
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003d3e:	4b36      	ldr	r3, [pc, #216]	; (8003e18 <UART_SetConfig+0x2d4>)
 8003d40:	fba3 2302 	umull	r2, r3, r3, r2
 8003d44:	095b      	lsrs	r3, r3, #5
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d4c:	441c      	add	r4, r3
 8003d4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d52:	2200      	movs	r2, #0
 8003d54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003d5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d60:	4642      	mov	r2, r8
 8003d62:	464b      	mov	r3, r9
 8003d64:	1891      	adds	r1, r2, r2
 8003d66:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d68:	415b      	adcs	r3, r3
 8003d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d70:	4641      	mov	r1, r8
 8003d72:	1851      	adds	r1, r2, r1
 8003d74:	6339      	str	r1, [r7, #48]	; 0x30
 8003d76:	4649      	mov	r1, r9
 8003d78:	414b      	adcs	r3, r1
 8003d7a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d7c:	f04f 0200 	mov.w	r2, #0
 8003d80:	f04f 0300 	mov.w	r3, #0
 8003d84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d88:	4659      	mov	r1, fp
 8003d8a:	00cb      	lsls	r3, r1, #3
 8003d8c:	4651      	mov	r1, sl
 8003d8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d92:	4651      	mov	r1, sl
 8003d94:	00ca      	lsls	r2, r1, #3
 8003d96:	4610      	mov	r0, r2
 8003d98:	4619      	mov	r1, r3
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	4642      	mov	r2, r8
 8003d9e:	189b      	adds	r3, r3, r2
 8003da0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003da4:	464b      	mov	r3, r9
 8003da6:	460a      	mov	r2, r1
 8003da8:	eb42 0303 	adc.w	r3, r2, r3
 8003dac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003dbc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003dc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	18db      	adds	r3, r3, r3
 8003dc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dca:	4613      	mov	r3, r2
 8003dcc:	eb42 0303 	adc.w	r3, r2, r3
 8003dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003dd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003dda:	f7fc fa13 	bl	8000204 <__aeabi_uldivmod>
 8003dde:	4602      	mov	r2, r0
 8003de0:	460b      	mov	r3, r1
 8003de2:	4b0d      	ldr	r3, [pc, #52]	; (8003e18 <UART_SetConfig+0x2d4>)
 8003de4:	fba3 1302 	umull	r1, r3, r3, r2
 8003de8:	095b      	lsrs	r3, r3, #5
 8003dea:	2164      	movs	r1, #100	; 0x64
 8003dec:	fb01 f303 	mul.w	r3, r1, r3
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	3332      	adds	r3, #50	; 0x32
 8003df6:	4a08      	ldr	r2, [pc, #32]	; (8003e18 <UART_SetConfig+0x2d4>)
 8003df8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfc:	095b      	lsrs	r3, r3, #5
 8003dfe:	f003 0207 	and.w	r2, r3, #7
 8003e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4422      	add	r2, r4
 8003e0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e0c:	e105      	b.n	800401a <UART_SetConfig+0x4d6>
 8003e0e:	bf00      	nop
 8003e10:	40011000 	.word	0x40011000
 8003e14:	40011400 	.word	0x40011400
 8003e18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e20:	2200      	movs	r2, #0
 8003e22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003e2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003e2e:	4642      	mov	r2, r8
 8003e30:	464b      	mov	r3, r9
 8003e32:	1891      	adds	r1, r2, r2
 8003e34:	6239      	str	r1, [r7, #32]
 8003e36:	415b      	adcs	r3, r3
 8003e38:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e3e:	4641      	mov	r1, r8
 8003e40:	1854      	adds	r4, r2, r1
 8003e42:	4649      	mov	r1, r9
 8003e44:	eb43 0501 	adc.w	r5, r3, r1
 8003e48:	f04f 0200 	mov.w	r2, #0
 8003e4c:	f04f 0300 	mov.w	r3, #0
 8003e50:	00eb      	lsls	r3, r5, #3
 8003e52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e56:	00e2      	lsls	r2, r4, #3
 8003e58:	4614      	mov	r4, r2
 8003e5a:	461d      	mov	r5, r3
 8003e5c:	4643      	mov	r3, r8
 8003e5e:	18e3      	adds	r3, r4, r3
 8003e60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e64:	464b      	mov	r3, r9
 8003e66:	eb45 0303 	adc.w	r3, r5, r3
 8003e6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e7e:	f04f 0200 	mov.w	r2, #0
 8003e82:	f04f 0300 	mov.w	r3, #0
 8003e86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e8a:	4629      	mov	r1, r5
 8003e8c:	008b      	lsls	r3, r1, #2
 8003e8e:	4621      	mov	r1, r4
 8003e90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e94:	4621      	mov	r1, r4
 8003e96:	008a      	lsls	r2, r1, #2
 8003e98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e9c:	f7fc f9b2 	bl	8000204 <__aeabi_uldivmod>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	4b60      	ldr	r3, [pc, #384]	; (8004028 <UART_SetConfig+0x4e4>)
 8003ea6:	fba3 2302 	umull	r2, r3, r3, r2
 8003eaa:	095b      	lsrs	r3, r3, #5
 8003eac:	011c      	lsls	r4, r3, #4
 8003eae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003eb8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ebc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003ec0:	4642      	mov	r2, r8
 8003ec2:	464b      	mov	r3, r9
 8003ec4:	1891      	adds	r1, r2, r2
 8003ec6:	61b9      	str	r1, [r7, #24]
 8003ec8:	415b      	adcs	r3, r3
 8003eca:	61fb      	str	r3, [r7, #28]
 8003ecc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ed0:	4641      	mov	r1, r8
 8003ed2:	1851      	adds	r1, r2, r1
 8003ed4:	6139      	str	r1, [r7, #16]
 8003ed6:	4649      	mov	r1, r9
 8003ed8:	414b      	adcs	r3, r1
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	f04f 0300 	mov.w	r3, #0
 8003ee4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ee8:	4659      	mov	r1, fp
 8003eea:	00cb      	lsls	r3, r1, #3
 8003eec:	4651      	mov	r1, sl
 8003eee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ef2:	4651      	mov	r1, sl
 8003ef4:	00ca      	lsls	r2, r1, #3
 8003ef6:	4610      	mov	r0, r2
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4603      	mov	r3, r0
 8003efc:	4642      	mov	r2, r8
 8003efe:	189b      	adds	r3, r3, r2
 8003f00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f04:	464b      	mov	r3, r9
 8003f06:	460a      	mov	r2, r1
 8003f08:	eb42 0303 	adc.w	r3, r2, r3
 8003f0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	f04f 0300 	mov.w	r3, #0
 8003f24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003f28:	4649      	mov	r1, r9
 8003f2a:	008b      	lsls	r3, r1, #2
 8003f2c:	4641      	mov	r1, r8
 8003f2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f32:	4641      	mov	r1, r8
 8003f34:	008a      	lsls	r2, r1, #2
 8003f36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003f3a:	f7fc f963 	bl	8000204 <__aeabi_uldivmod>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	460b      	mov	r3, r1
 8003f42:	4b39      	ldr	r3, [pc, #228]	; (8004028 <UART_SetConfig+0x4e4>)
 8003f44:	fba3 1302 	umull	r1, r3, r3, r2
 8003f48:	095b      	lsrs	r3, r3, #5
 8003f4a:	2164      	movs	r1, #100	; 0x64
 8003f4c:	fb01 f303 	mul.w	r3, r1, r3
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	011b      	lsls	r3, r3, #4
 8003f54:	3332      	adds	r3, #50	; 0x32
 8003f56:	4a34      	ldr	r2, [pc, #208]	; (8004028 <UART_SetConfig+0x4e4>)
 8003f58:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5c:	095b      	lsrs	r3, r3, #5
 8003f5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f62:	441c      	add	r4, r3
 8003f64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f68:	2200      	movs	r2, #0
 8003f6a:	673b      	str	r3, [r7, #112]	; 0x70
 8003f6c:	677a      	str	r2, [r7, #116]	; 0x74
 8003f6e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f72:	4642      	mov	r2, r8
 8003f74:	464b      	mov	r3, r9
 8003f76:	1891      	adds	r1, r2, r2
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	415b      	adcs	r3, r3
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f82:	4641      	mov	r1, r8
 8003f84:	1851      	adds	r1, r2, r1
 8003f86:	6039      	str	r1, [r7, #0]
 8003f88:	4649      	mov	r1, r9
 8003f8a:	414b      	adcs	r3, r1
 8003f8c:	607b      	str	r3, [r7, #4]
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	f04f 0300 	mov.w	r3, #0
 8003f96:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f9a:	4659      	mov	r1, fp
 8003f9c:	00cb      	lsls	r3, r1, #3
 8003f9e:	4651      	mov	r1, sl
 8003fa0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fa4:	4651      	mov	r1, sl
 8003fa6:	00ca      	lsls	r2, r1, #3
 8003fa8:	4610      	mov	r0, r2
 8003faa:	4619      	mov	r1, r3
 8003fac:	4603      	mov	r3, r0
 8003fae:	4642      	mov	r2, r8
 8003fb0:	189b      	adds	r3, r3, r2
 8003fb2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fb4:	464b      	mov	r3, r9
 8003fb6:	460a      	mov	r2, r1
 8003fb8:	eb42 0303 	adc.w	r3, r2, r3
 8003fbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	663b      	str	r3, [r7, #96]	; 0x60
 8003fc8:	667a      	str	r2, [r7, #100]	; 0x64
 8003fca:	f04f 0200 	mov.w	r2, #0
 8003fce:	f04f 0300 	mov.w	r3, #0
 8003fd2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003fd6:	4649      	mov	r1, r9
 8003fd8:	008b      	lsls	r3, r1, #2
 8003fda:	4641      	mov	r1, r8
 8003fdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fe0:	4641      	mov	r1, r8
 8003fe2:	008a      	lsls	r2, r1, #2
 8003fe4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003fe8:	f7fc f90c 	bl	8000204 <__aeabi_uldivmod>
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	4b0d      	ldr	r3, [pc, #52]	; (8004028 <UART_SetConfig+0x4e4>)
 8003ff2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ff6:	095b      	lsrs	r3, r3, #5
 8003ff8:	2164      	movs	r1, #100	; 0x64
 8003ffa:	fb01 f303 	mul.w	r3, r1, r3
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	011b      	lsls	r3, r3, #4
 8004002:	3332      	adds	r3, #50	; 0x32
 8004004:	4a08      	ldr	r2, [pc, #32]	; (8004028 <UART_SetConfig+0x4e4>)
 8004006:	fba2 2303 	umull	r2, r3, r2, r3
 800400a:	095b      	lsrs	r3, r3, #5
 800400c:	f003 020f 	and.w	r2, r3, #15
 8004010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4422      	add	r2, r4
 8004018:	609a      	str	r2, [r3, #8]
}
 800401a:	bf00      	nop
 800401c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004020:	46bd      	mov	sp, r7
 8004022:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004026:	bf00      	nop
 8004028:	51eb851f 	.word	0x51eb851f

0800402c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800402c:	b084      	sub	sp, #16
 800402e:	b580      	push	{r7, lr}
 8004030:	b084      	sub	sp, #16
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	f107 001c 	add.w	r0, r7, #28
 800403a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800403e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004040:	2b01      	cmp	r3, #1
 8004042:	d122      	bne.n	800408a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004048:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004058:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800406c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800406e:	2b01      	cmp	r3, #1
 8004070:	d105      	bne.n	800407e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 fa9c 	bl	80045bc <USB_CoreReset>
 8004084:	4603      	mov	r3, r0
 8004086:	73fb      	strb	r3, [r7, #15]
 8004088:	e01a      	b.n	80040c0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 fa90 	bl	80045bc <USB_CoreReset>
 800409c:	4603      	mov	r3, r0
 800409e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80040a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d106      	bne.n	80040b4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	639a      	str	r2, [r3, #56]	; 0x38
 80040b2:	e005      	b.n	80040c0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80040c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d10b      	bne.n	80040de <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f043 0206 	orr.w	r2, r3, #6
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f043 0220 	orr.w	r2, r3, #32
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80040de:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040ea:	b004      	add	sp, #16
 80040ec:	4770      	bx	lr

080040ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f023 0201 	bic.w	r2, r3, #1
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	460b      	mov	r3, r1
 800411a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800411c:	2300      	movs	r3, #0
 800411e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800412c:	78fb      	ldrb	r3, [r7, #3]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d115      	bne.n	800415e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800413e:	2001      	movs	r0, #1
 8004140:	f7fc feda 	bl	8000ef8 <HAL_Delay>
      ms++;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	3301      	adds	r3, #1
 8004148:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 fa28 	bl	80045a0 <USB_GetMode>
 8004150:	4603      	mov	r3, r0
 8004152:	2b01      	cmp	r3, #1
 8004154:	d01e      	beq.n	8004194 <USB_SetCurrentMode+0x84>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2b31      	cmp	r3, #49	; 0x31
 800415a:	d9f0      	bls.n	800413e <USB_SetCurrentMode+0x2e>
 800415c:	e01a      	b.n	8004194 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800415e:	78fb      	ldrb	r3, [r7, #3]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d115      	bne.n	8004190 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004170:	2001      	movs	r0, #1
 8004172:	f7fc fec1 	bl	8000ef8 <HAL_Delay>
      ms++;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	3301      	adds	r3, #1
 800417a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 fa0f 	bl	80045a0 <USB_GetMode>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <USB_SetCurrentMode+0x84>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2b31      	cmp	r3, #49	; 0x31
 800418c:	d9f0      	bls.n	8004170 <USB_SetCurrentMode+0x60>
 800418e:	e001      	b.n	8004194 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e005      	b.n	80041a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2b32      	cmp	r3, #50	; 0x32
 8004198:	d101      	bne.n	800419e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e000      	b.n	80041a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041a8:	b084      	sub	sp, #16
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b086      	sub	sp, #24
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80041b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80041ba:	2300      	movs	r3, #0
 80041bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80041c2:	2300      	movs	r3, #0
 80041c4:	613b      	str	r3, [r7, #16]
 80041c6:	e009      	b.n	80041dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	3340      	adds	r3, #64	; 0x40
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	2200      	movs	r2, #0
 80041d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	3301      	adds	r3, #1
 80041da:	613b      	str	r3, [r7, #16]
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	2b0e      	cmp	r3, #14
 80041e0:	d9f2      	bls.n	80041c8 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80041e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d11c      	bne.n	8004222 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041f6:	f043 0302 	orr.w	r3, r3, #2
 80041fa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004200:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	e005      	b.n	800422e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004226:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004234:	461a      	mov	r2, r3
 8004236:	2300      	movs	r3, #0
 8004238:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004240:	4619      	mov	r1, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004248:	461a      	mov	r2, r3
 800424a:	680b      	ldr	r3, [r1, #0]
 800424c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800424e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004250:	2b01      	cmp	r3, #1
 8004252:	d10c      	bne.n	800426e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004256:	2b00      	cmp	r3, #0
 8004258:	d104      	bne.n	8004264 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800425a:	2100      	movs	r1, #0
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 f965 	bl	800452c <USB_SetDevSpeed>
 8004262:	e008      	b.n	8004276 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004264:	2101      	movs	r1, #1
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f960 	bl	800452c <USB_SetDevSpeed>
 800426c:	e003      	b.n	8004276 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800426e:	2103      	movs	r1, #3
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f95b 	bl	800452c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004276:	2110      	movs	r1, #16
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f8f3 	bl	8004464 <USB_FlushTxFifo>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f91f 	bl	80044cc <USB_FlushRxFifo>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429e:	461a      	mov	r2, r3
 80042a0:	2300      	movs	r3, #0
 80042a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042aa:	461a      	mov	r2, r3
 80042ac:	2300      	movs	r3, #0
 80042ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b6:	461a      	mov	r2, r3
 80042b8:	2300      	movs	r3, #0
 80042ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042bc:	2300      	movs	r3, #0
 80042be:	613b      	str	r3, [r7, #16]
 80042c0:	e043      	b.n	800434a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	015a      	lsls	r2, r3, #5
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	4413      	add	r3, r2
 80042ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042d8:	d118      	bne.n	800430c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10a      	bne.n	80042f6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ec:	461a      	mov	r2, r3
 80042ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042f2:	6013      	str	r3, [r2, #0]
 80042f4:	e013      	b.n	800431e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	015a      	lsls	r2, r3, #5
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4413      	add	r3, r2
 80042fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004302:	461a      	mov	r2, r3
 8004304:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	e008      	b.n	800431e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	015a      	lsls	r2, r3, #5
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4413      	add	r3, r2
 8004314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004318:	461a      	mov	r2, r3
 800431a:	2300      	movs	r3, #0
 800431c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	015a      	lsls	r2, r3, #5
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	4413      	add	r3, r2
 8004326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800432a:	461a      	mov	r2, r3
 800432c:	2300      	movs	r3, #0
 800432e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4413      	add	r3, r2
 8004338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800433c:	461a      	mov	r2, r3
 800433e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004342:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	3301      	adds	r3, #1
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	429a      	cmp	r2, r3
 8004350:	d3b7      	bcc.n	80042c2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004352:	2300      	movs	r3, #0
 8004354:	613b      	str	r3, [r7, #16]
 8004356:	e043      	b.n	80043e0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4413      	add	r3, r2
 8004360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800436a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800436e:	d118      	bne.n	80043a2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10a      	bne.n	800438c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4413      	add	r3, r2
 800437e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004382:	461a      	mov	r2, r3
 8004384:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	e013      	b.n	80043b4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4413      	add	r3, r2
 8004394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004398:	461a      	mov	r2, r3
 800439a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800439e:	6013      	str	r3, [r2, #0]
 80043a0:	e008      	b.n	80043b4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	015a      	lsls	r2, r3, #5
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	4413      	add	r3, r2
 80043aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ae:	461a      	mov	r2, r3
 80043b0:	2300      	movs	r3, #0
 80043b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c0:	461a      	mov	r2, r3
 80043c2:	2300      	movs	r3, #0
 80043c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	015a      	lsls	r2, r3, #5
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	4413      	add	r3, r2
 80043ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d2:	461a      	mov	r2, r3
 80043d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	3301      	adds	r3, #1
 80043de:	613b      	str	r3, [r7, #16]
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d3b7      	bcc.n	8004358 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004408:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800440a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440c:	2b00      	cmp	r3, #0
 800440e:	d105      	bne.n	800441c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	f043 0210 	orr.w	r2, r3, #16
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	699a      	ldr	r2, [r3, #24]
 8004420:	4b0f      	ldr	r3, [pc, #60]	; (8004460 <USB_DevInit+0x2b8>)
 8004422:	4313      	orrs	r3, r2
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800442a:	2b00      	cmp	r3, #0
 800442c:	d005      	beq.n	800443a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	f043 0208 	orr.w	r2, r3, #8
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800443a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800443c:	2b01      	cmp	r3, #1
 800443e:	d107      	bne.n	8004450 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004448:	f043 0304 	orr.w	r3, r3, #4
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004450:	7dfb      	ldrb	r3, [r7, #23]
}
 8004452:	4618      	mov	r0, r3
 8004454:	3718      	adds	r7, #24
 8004456:	46bd      	mov	sp, r7
 8004458:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800445c:	b004      	add	sp, #16
 800445e:	4770      	bx	lr
 8004460:	803c3800 	.word	0x803c3800

08004464 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800446e:	2300      	movs	r3, #0
 8004470:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	3301      	adds	r3, #1
 8004476:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4a13      	ldr	r2, [pc, #76]	; (80044c8 <USB_FlushTxFifo+0x64>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d901      	bls.n	8004484 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e01b      	b.n	80044bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	daf2      	bge.n	8004472 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	019b      	lsls	r3, r3, #6
 8004494:	f043 0220 	orr.w	r2, r3, #32
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	3301      	adds	r3, #1
 80044a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	4a08      	ldr	r2, [pc, #32]	; (80044c8 <USB_FlushTxFifo+0x64>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d901      	bls.n	80044ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e006      	b.n	80044bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f003 0320 	and.w	r3, r3, #32
 80044b6:	2b20      	cmp	r3, #32
 80044b8:	d0f0      	beq.n	800449c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	00030d40 	.word	0x00030d40

080044cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	3301      	adds	r3, #1
 80044dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	4a11      	ldr	r2, [pc, #68]	; (8004528 <USB_FlushRxFifo+0x5c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d901      	bls.n	80044ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e018      	b.n	800451c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	daf2      	bge.n	80044d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80044f2:	2300      	movs	r3, #0
 80044f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2210      	movs	r2, #16
 80044fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	3301      	adds	r3, #1
 8004500:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	4a08      	ldr	r2, [pc, #32]	; (8004528 <USB_FlushRxFifo+0x5c>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d901      	bls.n	800450e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e006      	b.n	800451c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	f003 0310 	and.w	r3, r3, #16
 8004516:	2b10      	cmp	r3, #16
 8004518:	d0f0      	beq.n	80044fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	00030d40 	.word	0x00030d40

0800452c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	460b      	mov	r3, r1
 8004536:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	78fb      	ldrb	r3, [r7, #3]
 8004546:	68f9      	ldr	r1, [r7, #12]
 8004548:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800454c:	4313      	orrs	r3, r2
 800454e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800455e:	b480      	push	{r7}
 8004560:	b085      	sub	sp, #20
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004578:	f023 0303 	bic.w	r3, r3, #3
 800457c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800458c:	f043 0302 	orr.w	r3, r3, #2
 8004590:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	f003 0301 	and.w	r3, r3, #1
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	3301      	adds	r3, #1
 80045cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	4a13      	ldr	r2, [pc, #76]	; (8004620 <USB_CoreReset+0x64>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d901      	bls.n	80045da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e01b      	b.n	8004612 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	daf2      	bge.n	80045c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f043 0201 	orr.w	r2, r3, #1
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	3301      	adds	r3, #1
 80045f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4a09      	ldr	r2, [pc, #36]	; (8004620 <USB_CoreReset+0x64>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d901      	bls.n	8004604 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e006      	b.n	8004612 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b01      	cmp	r3, #1
 800460e:	d0f0      	beq.n	80045f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	00030d40 	.word	0x00030d40

08004624 <__libc_init_array>:
 8004624:	b570      	push	{r4, r5, r6, lr}
 8004626:	4d0d      	ldr	r5, [pc, #52]	; (800465c <__libc_init_array+0x38>)
 8004628:	4c0d      	ldr	r4, [pc, #52]	; (8004660 <__libc_init_array+0x3c>)
 800462a:	1b64      	subs	r4, r4, r5
 800462c:	10a4      	asrs	r4, r4, #2
 800462e:	2600      	movs	r6, #0
 8004630:	42a6      	cmp	r6, r4
 8004632:	d109      	bne.n	8004648 <__libc_init_array+0x24>
 8004634:	4d0b      	ldr	r5, [pc, #44]	; (8004664 <__libc_init_array+0x40>)
 8004636:	4c0c      	ldr	r4, [pc, #48]	; (8004668 <__libc_init_array+0x44>)
 8004638:	f000 f820 	bl	800467c <_init>
 800463c:	1b64      	subs	r4, r4, r5
 800463e:	10a4      	asrs	r4, r4, #2
 8004640:	2600      	movs	r6, #0
 8004642:	42a6      	cmp	r6, r4
 8004644:	d105      	bne.n	8004652 <__libc_init_array+0x2e>
 8004646:	bd70      	pop	{r4, r5, r6, pc}
 8004648:	f855 3b04 	ldr.w	r3, [r5], #4
 800464c:	4798      	blx	r3
 800464e:	3601      	adds	r6, #1
 8004650:	e7ee      	b.n	8004630 <__libc_init_array+0xc>
 8004652:	f855 3b04 	ldr.w	r3, [r5], #4
 8004656:	4798      	blx	r3
 8004658:	3601      	adds	r6, #1
 800465a:	e7f2      	b.n	8004642 <__libc_init_array+0x1e>
 800465c:	080046cc 	.word	0x080046cc
 8004660:	080046cc 	.word	0x080046cc
 8004664:	080046cc 	.word	0x080046cc
 8004668:	080046d0 	.word	0x080046d0

0800466c <memset>:
 800466c:	4402      	add	r2, r0
 800466e:	4603      	mov	r3, r0
 8004670:	4293      	cmp	r3, r2
 8004672:	d100      	bne.n	8004676 <memset+0xa>
 8004674:	4770      	bx	lr
 8004676:	f803 1b01 	strb.w	r1, [r3], #1
 800467a:	e7f9      	b.n	8004670 <memset+0x4>

0800467c <_init>:
 800467c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800467e:	bf00      	nop
 8004680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004682:	bc08      	pop	{r3}
 8004684:	469e      	mov	lr, r3
 8004686:	4770      	bx	lr

08004688 <_fini>:
 8004688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468a:	bf00      	nop
 800468c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800468e:	bc08      	pop	{r3}
 8004690:	469e      	mov	lr, r3
 8004692:	4770      	bx	lr
